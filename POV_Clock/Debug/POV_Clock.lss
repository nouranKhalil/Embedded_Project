
POV_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00003b5a  00003bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800084  00800084  00003c12  2**0
                  ALLOC
  3 .stab         0000375c  00000000  00000000  00003c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ee  00000000  00000000  00007370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000895e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ac92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bd93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cd18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ce98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 1a 	call	0x352e	; 0x352e <main>
      8a:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <vTIMER0_Init>:
#include "Timer_Config.h"
#include "Timer_Interface.h"
#include "Timer_Private.h"

void vTIMER0_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*1. Select Mode*/
	vTimer0_SetMode(TIMER0_MODE);
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	0e 94 ba 06 	call	0xd74	; 0xd74 <vTimer0_SetMode>

	/*2- Select OC0 Pin Mode*/
	vTimer0_OC0_SetMode(TIMER0_OC0_MODE);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	0e 94 21 07 	call	0xe42	; 0xe42 <vTimer0_OC0_SetMode>

	/*3- Set Pre-load "Initial Counting Value" Value*/
	vTimer0_SetPreLoad(TIMER0_INITIAL_VALUE);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vTimer0_SetPreLoad>

	/*4- Set Compare Match Value*/
	vTimer0_SetOCRValue(TIMER0_OCR0_VALUE);
     cb8:	8f e7       	ldi	r24, 0x7F	; 127
     cba:	0e 94 ac 06 	call	0xd58	; 0xd58 <vTimer0_SetOCRValue>

	/*5- Enable/ Disable OV Interrupt*/
	vTimer0_OVF_InterruptDisable();
     cbe:	0e 94 74 06 	call	0xce8	; 0xce8 <vTimer0_OVF_InterruptDisable>

	/*6- Enable/ Disable OC Interrupt*/
	vTimer0_OCM_InterruptDisable();
     cc2:	0e 94 90 06 	call	0xd20	; 0xd20 <vTimer0_OCM_InterruptDisable>
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <vTimer0_OVF_InterruptEnable>:

void vTimer0_OVF_InterruptEnable(void)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
     cd4:	a9 e5       	ldi	r26, 0x59	; 89
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e9 e5       	ldi	r30, 0x59	; 89
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	8c 93       	st	X, r24
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <vTimer0_OVF_InterruptDisable>:

void vTimer0_OVF_InterruptDisable(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     cf0:	a9 e5       	ldi	r26, 0x59	; 89
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e9 e5       	ldi	r30, 0x59	; 89
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 7f       	andi	r24, 0xFE	; 254
     cfc:	8c 93       	st	X, r24
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <vTimer0_OCM_InterruptEnable>:

void vTimer0_OCM_InterruptEnable(void)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
     d0c:	a9 e5       	ldi	r26, 0x59	; 89
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e9 e5       	ldi	r30, 0x59	; 89
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	8c 93       	st	X, r24
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <vTimer0_OCM_InterruptDisable>:

void vTimer0_OCM_InterruptDisable(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <vTimer0_SetPreLoad>:

void vTimer0_SetPreLoad(u8 value)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
     d48:	e2 e5       	ldi	r30, 0x52	; 82
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 83       	st	Z, r24
}
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <vTimer0_SetOCRValue>:

void vTimer0_SetOCRValue(u8 value)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	0f 92       	push	r0
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
     d64:	ec e5       	ldi	r30, 0x5C	; 92
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	80 83       	st	Z, r24
}
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <vTimer0_SetMode>:

void vTimer0_SetMode(u8 mode)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <vTimer0_SetMode+0x6>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3b 83       	std	Y+3, r19	; 0x03
     d8a:	2a 83       	std	Y+2, r18	; 0x02
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	21 f1       	breq	.+72     	; 0xdde <vTimer0_SetMode+0x6a>
     d96:	2a 81       	ldd	r18, Y+2	; 0x02
     d98:	3b 81       	ldd	r19, Y+3	; 0x03
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	2c f4       	brge	.+10     	; 0xdaa <vTimer0_SetMode+0x36>
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	61 f0       	breq	.+24     	; 0xdc0 <vTimer0_SetMode+0x4c>
     da8:	46 c0       	rjmp	.+140    	; 0xe36 <vTimer0_SetMode+0xc2>
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	3b 81       	ldd	r19, Y+3	; 0x03
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	21 f1       	breq	.+72     	; 0xdfc <vTimer0_SetMode+0x88>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	71 f1       	breq	.+92     	; 0xe1a <vTimer0_SetMode+0xa6>
     dbe:	3b c0       	rjmp	.+118    	; 0xe36 <vTimer0_SetMode+0xc2>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM01);
     dc0:	a3 e5       	ldi	r26, 0x53	; 83
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e3 e5       	ldi	r30, 0x53	; 83
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM00);
     dce:	a3 e5       	ldi	r26, 0x53	; 83
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e3 e5       	ldi	r30, 0x53	; 83
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7b       	andi	r24, 0xBF	; 191
     dda:	8c 93       	st	X, r24
     ddc:	2c c0       	rjmp	.+88     	; 0xe36 <vTimer0_SetMode+0xc2>
		break;

	case TIMER0_PHASECORRECT_MODE:
		CLR_BIT(TCCR0,WGM01);
     dde:	a3 e5       	ldi	r26, 0x53	; 83
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e3 e5       	ldi	r30, 0x53	; 83
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
     dec:	a3 e5       	ldi	r26, 0x53	; 83
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e3 e5       	ldi	r30, 0x53	; 83
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	8c 93       	st	X, r24
     dfa:	1d c0       	rjmp	.+58     	; 0xe36 <vTimer0_SetMode+0xc2>
		break;

	case TIMER0_CTC_MODE:
		SET_BIT(TCCR0,WGM01);
     dfc:	a3 e5       	ldi	r26, 0x53	; 83
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e3 e5       	ldi	r30, 0x53	; 83
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 60       	ori	r24, 0x08	; 8
     e08:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM00);
     e0a:	a3 e5       	ldi	r26, 0x53	; 83
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e3 e5       	ldi	r30, 0x53	; 83
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8c 93       	st	X, r24
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <vTimer0_SetMode+0xc2>
		break;

	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM01);
     e1a:	a3 e5       	ldi	r26, 0x53	; 83
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e3 e5       	ldi	r30, 0x53	; 83
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
     e28:	a3 e5       	ldi	r26, 0x53	; 83
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e3 e5       	ldi	r30, 0x53	; 83
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 64       	ori	r24, 0x40	; 64
     e34:	8c 93       	st	X, r24

	default:
		/*error handling*/
		break;
	}
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <vTimer0_OC0_SetMode>:

void vTimer0_OC0_SetMode(u8 mode)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <vTimer0_OC0_SetMode+0x6>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3b 83       	std	Y+3, r19	; 0x03
     e58:	2a 83       	std	Y+2, r18	; 0x02
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	21 f1       	breq	.+72     	; 0xeac <vTimer0_OC0_SetMode+0x6a>
     e64:	2a 81       	ldd	r18, Y+2	; 0x02
     e66:	3b 81       	ldd	r19, Y+3	; 0x03
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <vTimer0_OC0_SetMode+0x36>
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	61 f0       	breq	.+24     	; 0xe8e <vTimer0_OC0_SetMode+0x4c>
     e76:	46 c0       	rjmp	.+140    	; 0xf04 <vTimer0_OC0_SetMode+0xc2>
     e78:	2a 81       	ldd	r18, Y+2	; 0x02
     e7a:	3b 81       	ldd	r19, Y+3	; 0x03
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	21 f1       	breq	.+72     	; 0xeca <vTimer0_OC0_SetMode+0x88>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	9b 81       	ldd	r25, Y+3	; 0x03
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	71 f1       	breq	.+92     	; 0xee8 <vTimer0_OC0_SetMode+0xa6>
     e8c:	3b c0       	rjmp	.+118    	; 0xf04 <vTimer0_OC0_SetMode+0xc2>
	{
	case TIMER_OC_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
     e8e:	a3 e5       	ldi	r26, 0x53	; 83
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e3 e5       	ldi	r30, 0x53	; 83
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7e       	andi	r24, 0xEF	; 239
     e9a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	8c 93       	st	X, r24
     eaa:	2c c0       	rjmp	.+88     	; 0xf04 <vTimer0_OC0_SetMode+0xc2>
		break;

	case TIMER_OC_TOGGLE:
		SET_BIT(TCCR0,COM00);
     eac:	a3 e5       	ldi	r26, 0x53	; 83
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e3 e5       	ldi	r30, 0x53	; 83
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
     eba:	a3 e5       	ldi	r26, 0x53	; 83
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e3 e5       	ldi	r30, 0x53	; 83
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	8c 93       	st	X, r24
     ec8:	1d c0       	rjmp	.+58     	; 0xf04 <vTimer0_OC0_SetMode+0xc2>
		break;

	case TIMER_OC_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
     eca:	a3 e5       	ldi	r26, 0x53	; 83
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e3 e5       	ldi	r30, 0x53	; 83
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7e       	andi	r24, 0xEF	; 239
     ed6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     ed8:	a3 e5       	ldi	r26, 0x53	; 83
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e3 e5       	ldi	r30, 0x53	; 83
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 62       	ori	r24, 0x20	; 32
     ee4:	8c 93       	st	X, r24
     ee6:	0e c0       	rjmp	.+28     	; 0xf04 <vTimer0_OC0_SetMode+0xc2>
		break;

	case TIMER_OC_INVERTING:
		SET_BIT(TCCR0,COM00);
     ee8:	a3 e5       	ldi	r26, 0x53	; 83
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e3 e5       	ldi	r30, 0x53	; 83
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e3 e5       	ldi	r30, 0x53	; 83
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	8c 93       	st	X, r24

	default:
		/*error handling*/
		break;
	}
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <vTIMER0_Start>:

void vTIMER0_Start(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	vTimer0_PrescalerSelect(TIMER0_PRESCALER);
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <vTimer0_PrescalerSelect>
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <vTIMER0_Stop>:

void vTIMER0_Stop(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,CS00);
     f2c:	a3 e5       	ldi	r26, 0x53	; 83
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8d 7f       	andi	r24, 0xFD	; 253
     f46:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8b 7f       	andi	r24, 0xFB	; 251
     f54:	8c 93       	st	X, r24
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <vTimer0_PrescalerSelect>:

void vTimer0_PrescalerSelect(u8 prescaler)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <vTimer0_PrescalerSelect+0x6>
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
	switch(prescaler)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3b 83       	std	Y+3, r19	; 0x03
     f72:	2a 83       	std	Y+2, r18	; 0x02
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <vTimer0_PrescalerSelect+0x24>
     f7e:	6b c0       	rjmp	.+214    	; 0x1056 <vTimer0_PrescalerSelect+0xfa>
     f80:	2a 81       	ldd	r18, Y+2	; 0x02
     f82:	3b 81       	ldd	r19, Y+3	; 0x03
     f84:	25 30       	cpi	r18, 0x05	; 5
     f86:	31 05       	cpc	r19, r1
     f88:	8c f4       	brge	.+34     	; 0xfac <vTimer0_PrescalerSelect+0x50>
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	91 05       	cpc	r25, r1
     f92:	a9 f1       	breq	.+106    	; 0xffe <vTimer0_PrescalerSelect+0xa2>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	23 30       	cpi	r18, 0x03	; 3
     f9a:	31 05       	cpc	r19, r1
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <vTimer0_PrescalerSelect+0x44>
     f9e:	45 c0       	rjmp	.+138    	; 0x102a <vTimer0_PrescalerSelect+0xce>
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	a1 f0       	breq	.+40     	; 0xfd2 <vTimer0_PrescalerSelect+0x76>
     faa:	ac c0       	rjmp	.+344    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
     fac:	2a 81       	ldd	r18, Y+2	; 0x02
     fae:	3b 81       	ldd	r19, Y+3	; 0x03
     fb0:	26 30       	cpi	r18, 0x06	; 6
     fb2:	31 05       	cpc	r19, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <vTimer0_PrescalerSelect+0x5c>
     fb6:	7b c0       	rjmp	.+246    	; 0x10ae <vTimer0_PrescalerSelect+0x152>
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	86 30       	cpi	r24, 0x06	; 6
     fbe:	91 05       	cpc	r25, r1
     fc0:	0c f4       	brge	.+2      	; 0xfc4 <vTimer0_PrescalerSelect+0x68>
     fc2:	5f c0       	rjmp	.+190    	; 0x1082 <vTimer0_PrescalerSelect+0x126>
     fc4:	2a 81       	ldd	r18, Y+2	; 0x02
     fc6:	3b 81       	ldd	r19, Y+3	; 0x03
     fc8:	27 30       	cpi	r18, 0x07	; 7
     fca:	31 05       	cpc	r19, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <vTimer0_PrescalerSelect+0x74>
     fce:	85 c0       	rjmp	.+266    	; 0x10da <vTimer0_PrescalerSelect+0x17e>
     fd0:	99 c0       	rjmp	.+306    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
	{
	case TIMER_SCALER_1:
		SET_BIT(TCCR0,CS00);
     fd2:	a3 e5       	ldi	r26, 0x53	; 83
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e5       	ldi	r30, 0x53	; 83
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS01);
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8d 7f       	andi	r24, 0xFD	; 253
     fec:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
     fee:	a3 e5       	ldi	r26, 0x53	; 83
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e3 e5       	ldi	r30, 0x53	; 83
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	8c 93       	st	X, r24
     ffc:	83 c0       	rjmp	.+262    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case TIMER_SCALER_8:
		CLR_BIT(TCCR0,CS00);
     ffe:	a3 e5       	ldi	r26, 0x53	; 83
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    100c:	a3 e5       	ldi	r26, 0x53	; 83
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e3 e5       	ldi	r30, 0x53	; 83
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8b 7f       	andi	r24, 0xFB	; 251
    1026:	8c 93       	st	X, r24
    1028:	6d c0       	rjmp	.+218    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case TIMER_SCALER_64:
		SET_BIT(TCCR0,CS00);
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
    1046:	a3 e5       	ldi	r26, 0x53	; 83
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e3 e5       	ldi	r30, 0x53	; 83
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	8c 93       	st	X, r24
    1054:	57 c0       	rjmp	.+174    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case TIMER_SCALER_256:
		CLR_BIT(TCCR0,CS00);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS01);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8d 7f       	andi	r24, 0xFD	; 253
    1070:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	84 60       	ori	r24, 0x04	; 4
    107e:	8c 93       	st	X, r24
    1080:	41 c0       	rjmp	.+130    	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case TIMER_SCALER_1024:
		SET_BIT(TCCR0,CS00);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS01);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8d 7f       	andi	r24, 0xFD	; 253
    109c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
    109e:	a3 e5       	ldi	r26, 0x53	; 83
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e3 e5       	ldi	r30, 0x53	; 83
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	84 60       	ori	r24, 0x04	; 4
    10aa:	8c 93       	st	X, r24
    10ac:	2b c0       	rjmp	.+86     	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case EXTERNALl_FALLING:
		CLR_BIT(TCCR0,CS00);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
    10ba:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
    10ca:	a3 e5       	ldi	r26, 0x53	; 83
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	8c 93       	st	X, r24
    10d8:	15 c0       	rjmp	.+42     	; 0x1104 <vTimer0_PrescalerSelect+0x1a8>
		break;
	case EXTERNAL_RISING:
		SET_BIT(TCCR0,CS00);
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	82 60       	ori	r24, 0x02	; 2
    10f4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
    10f6:	a3 e5       	ldi	r26, 0x53	; 83
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e3 e5       	ldi	r30, 0x53	; 83
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	8c 93       	st	X, r24
		break;
	default:
		/*error handling*/
		break;
	}
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <vTimer1_Init>:

/***************************Timer 1************************************/


void vTimer1_Init(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/*1. Select Mode*/
	vTimer1_SetMode(TIMER1_MODE);
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <vTimer1_SetMode>

	/*2- Select OC1A Pin Mode*/
	vTimer1_OC1A_SetMode(TIMER1_OC1A_MODE);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTimer1_OC1A_SetMode>
	/*3- Select OC1B Pin Mode*/
	vTimer1_OC1B_SetMode(TIMER1_OC1B_MODE);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <vTimer1_OC1B_SetMode>

	/*3- Set Pre-load "Initial Counting Value" Value*/
	vTimer1_SetPreLoad(TIMER1_INITIAL_VALUE);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 c5 0b 	call	0x178a	; 0x178a <vTimer1_SetPreLoad>

	/*4- Set Compare Match Value*/
	vTimer1_SetOCR_A_Value(TIMER1_OCR1A_VALUE);
    1132:	80 ec       	ldi	r24, 0xC0	; 192
    1134:	9d eb       	ldi	r25, 0xBD	; 189
    1136:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vTimer1_SetOCR_A_Value>
	vTimer1_SetOCR_B_Value(TIMER1_OCR1B_VALUE);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <vTimer1_SetOCR_B_Value>

	/*6- Set ICR Value*/
	vTimer1_SetICR_Value(TIMER1_ICR_VALUE);
    1142:	8f e1       	ldi	r24, 0x1F	; 31
    1144:	9e e4       	ldi	r25, 0x4E	; 78
    1146:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vTimer1_SetICR_Value>

	/*7- Disable Interrupts*/
	vTimer1_OVF_InterruptDisable();
    114a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <vTimer1_OVF_InterruptDisable>
	vTimer1_OCM_A_InterruptEnable();
    114e:	0e 94 29 0c 	call	0x1852	; 0x1852 <vTimer1_OCM_A_InterruptEnable>
	vTimer1_OCM_B_InterruptDisable();
    1152:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <vTimer1_OCM_B_InterruptDisable>
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <vTimer1_Start>:

void vTimer1_Start(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	vTimer1_PrescalerSelect(TIMER1_PRESCALER);
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vTimer1_PrescalerSelect>
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <vTimer1_Stop>:

void vTimer1_Stop(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,CS10);
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1186:	ae e4       	ldi	r26, 0x4E	; 78
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ee e4       	ldi	r30, 0x4E	; 78
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	8c 93       	st	X, r24
}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <vTimer1_SetMode>:
void vTimer1_SetMode(u8 mode)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <vTimer1_SetMode+0x6>
    11ae:	0f 92       	push	r0
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	89 83       	std	Y+1, r24	; 0x01
    switch(mode)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3b 83       	std	Y+3, r19	; 0x03
    11be:	2a 83       	std	Y+2, r18	; 0x02
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	87 30       	cpi	r24, 0x07	; 7
    11c6:	91 05       	cpc	r25, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <vTimer1_SetMode+0x24>
    11ca:	24 c1       	rjmp	.+584    	; 0x1414 <vTimer1_SetMode+0x26c>
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	3b 81       	ldd	r19, Y+3	; 0x03
    11d0:	28 30       	cpi	r18, 0x08	; 8
    11d2:	31 05       	cpc	r19, r1
    11d4:	4c f5       	brge	.+82     	; 0x1228 <vTimer1_SetMode+0x80>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <vTimer1_SetMode+0x3a>
    11e0:	a5 c0       	rjmp	.+330    	; 0x132c <vTimer1_SetMode+0x184>
    11e2:	2a 81       	ldd	r18, Y+2	; 0x02
    11e4:	3b 81       	ldd	r19, Y+3	; 0x03
    11e6:	24 30       	cpi	r18, 0x04	; 4
    11e8:	31 05       	cpc	r19, r1
    11ea:	8c f4       	brge	.+34     	; 0x120e <vTimer1_SetMode+0x66>
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <vTimer1_SetMode+0x50>
    11f6:	60 c0       	rjmp	.+192    	; 0x12b8 <vTimer1_SetMode+0x110>
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	3b 81       	ldd	r19, Y+3	; 0x03
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	0c f0       	brlt	.+2      	; 0x1204 <vTimer1_SetMode+0x5c>
    1202:	77 c0       	rjmp	.+238    	; 0x12f2 <vTimer1_SetMode+0x14a>
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	c9 f1       	breq	.+114    	; 0x127e <vTimer1_SetMode+0xd6>
    120c:	ea c1       	rjmp	.+980    	; 0x15e2 <vTimer1_SetMode+0x43a>
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	3b 81       	ldd	r19, Y+3	; 0x03
    1212:	25 30       	cpi	r18, 0x05	; 5
    1214:	31 05       	cpc	r19, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <vTimer1_SetMode+0x72>
    1218:	c3 c0       	rjmp	.+390    	; 0x13a0 <vTimer1_SetMode+0x1f8>
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	86 30       	cpi	r24, 0x06	; 6
    1220:	91 05       	cpc	r25, r1
    1222:	0c f0       	brlt	.+2      	; 0x1226 <vTimer1_SetMode+0x7e>
    1224:	da c0       	rjmp	.+436    	; 0x13da <vTimer1_SetMode+0x232>
    1226:	9f c0       	rjmp	.+318    	; 0x1366 <vTimer1_SetMode+0x1be>
    1228:	2a 81       	ldd	r18, Y+2	; 0x02
    122a:	3b 81       	ldd	r19, Y+3	; 0x03
    122c:	2b 30       	cpi	r18, 0x0B	; 11
    122e:	31 05       	cpc	r19, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <vTimer1_SetMode+0x8c>
    1232:	64 c1       	rjmp	.+712    	; 0x14fc <vTimer1_SetMode+0x354>
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	8c 30       	cpi	r24, 0x0C	; 12
    123a:	91 05       	cpc	r25, r1
    123c:	6c f4       	brge	.+26     	; 0x1258 <vTimer1_SetMode+0xb0>
    123e:	2a 81       	ldd	r18, Y+2	; 0x02
    1240:	3b 81       	ldd	r19, Y+3	; 0x03
    1242:	29 30       	cpi	r18, 0x09	; 9
    1244:	31 05       	cpc	r19, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <vTimer1_SetMode+0xa2>
    1248:	1f c1       	rjmp	.+574    	; 0x1488 <vTimer1_SetMode+0x2e0>
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	8a 30       	cpi	r24, 0x0A	; 10
    1250:	91 05       	cpc	r25, r1
    1252:	0c f0       	brlt	.+2      	; 0x1256 <vTimer1_SetMode+0xae>
    1254:	36 c1       	rjmp	.+620    	; 0x14c2 <vTimer1_SetMode+0x31a>
    1256:	fb c0       	rjmp	.+502    	; 0x144e <vTimer1_SetMode+0x2a6>
    1258:	2a 81       	ldd	r18, Y+2	; 0x02
    125a:	3b 81       	ldd	r19, Y+3	; 0x03
    125c:	2e 30       	cpi	r18, 0x0E	; 14
    125e:	31 05       	cpc	r19, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <vTimer1_SetMode+0xbc>
    1262:	86 c1       	rjmp	.+780    	; 0x1570 <vTimer1_SetMode+0x3c8>
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	8f 30       	cpi	r24, 0x0F	; 15
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <vTimer1_SetMode+0xc8>
    126e:	9d c1       	rjmp	.+826    	; 0x15aa <vTimer1_SetMode+0x402>
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	3b 81       	ldd	r19, Y+3	; 0x03
    1274:	2c 30       	cpi	r18, 0x0C	; 12
    1276:	31 05       	cpc	r19, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <vTimer1_SetMode+0xd4>
    127a:	5d c1       	rjmp	.+698    	; 0x1536 <vTimer1_SetMode+0x38e>
    127c:	b2 c1       	rjmp	.+868    	; 0x15e2 <vTimer1_SetMode+0x43a>
    {
        case TIMER1_NORMAL_MODE:
            // Normal mode: WGM13 = 0, WGM12 = 0, WGM11 = 0, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    127e:	af e4       	ldi	r26, 0x4F	; 79
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ef e4       	ldi	r30, 0x4F	; 79
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8e 7f       	andi	r24, 0xFE	; 254
    128a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    128c:	af e4       	ldi	r26, 0x4F	; 79
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ef e4       	ldi	r30, 0x4F	; 79
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8d 7f       	andi	r24, 0xFD	; 253
    1298:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	87 7f       	andi	r24, 0xF7	; 247
    12a6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    12a8:	ae e4       	ldi	r26, 0x4E	; 78
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ee e4       	ldi	r30, 0x4E	; 78
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7e       	andi	r24, 0xEF	; 239
    12b4:	8c 93       	st	X, r24
    12b6:	95 c1       	rjmp	.+810    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_CORRECT_MODE_8:
            // Phase Correct PWM, 8-bit: WGM13 = 0, WGM12 = 0, WGM11 = 0, WGM10 = 1
            CLR_BIT(TCCR1A, WGM11);
    12b8:	af e4       	ldi	r26, 0x4F	; 79
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ef e4       	ldi	r30, 0x4F	; 79
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8d 7f       	andi	r24, 0xFD	; 253
    12c4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    12c6:	ae e4       	ldi	r26, 0x4E	; 78
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ee e4       	ldi	r30, 0x4E	; 78
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    12d4:	ae e4       	ldi	r26, 0x4E	; 78
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ee e4       	ldi	r30, 0x4E	; 78
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7e       	andi	r24, 0xEF	; 239
    12e0:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM10);
    12e2:	af e4       	ldi	r26, 0x4F	; 79
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ef e4       	ldi	r30, 0x4F	; 79
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	8c 93       	st	X, r24
    12f0:	78 c1       	rjmp	.+752    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_CORRECT_MODE_9:
            // Phase Correct PWM, 9-bit: WGM13 = 0, WGM12 = 0, WGM11 = 1, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    12f2:	af e4       	ldi	r26, 0x4F	; 79
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ef e4       	ldi	r30, 0x4F	; 79
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    1300:	ae e4       	ldi	r26, 0x4E	; 78
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ee e4       	ldi	r30, 0x4E	; 78
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	87 7f       	andi	r24, 0xF7	; 247
    130c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    130e:	ae e4       	ldi	r26, 0x4E	; 78
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ee e4       	ldi	r30, 0x4E	; 78
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7e       	andi	r24, 0xEF	; 239
    131a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    131c:	af e4       	ldi	r26, 0x4F	; 79
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ef e4       	ldi	r30, 0x4F	; 79
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	82 60       	ori	r24, 0x02	; 2
    1328:	8c 93       	st	X, r24
    132a:	5b c1       	rjmp	.+694    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_CORRECT_MODE_10:
            // Phase Correct PWM, 10-bit: WGM13 = 0, WGM12 = 0, WGM11 = 1, WGM10 = 1
            SET_BIT(TCCR1A, WGM10);
    132c:	af e4       	ldi	r26, 0x4F	; 79
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ef e4       	ldi	r30, 0x4F	; 79
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    133a:	af e4       	ldi	r26, 0x4F	; 79
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ef e4       	ldi	r30, 0x4F	; 79
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    1348:	ae e4       	ldi	r26, 0x4E	; 78
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e4       	ldi	r30, 0x4E	; 78
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	87 7f       	andi	r24, 0xF7	; 247
    1354:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    1356:	ae e4       	ldi	r26, 0x4E	; 78
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ee e4       	ldi	r30, 0x4E	; 78
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8f 7e       	andi	r24, 0xEF	; 239
    1362:	8c 93       	st	X, r24
    1364:	3e c1       	rjmp	.+636    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_CTC_MODE_OCRA_IS_TOP:
            // CTC with OCRA as top: WGM13 = 0, WGM12 = 1, WGM11 = 0, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    1366:	af e4       	ldi	r26, 0x4F	; 79
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ef e4       	ldi	r30, 0x4F	; 79
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8e 7f       	andi	r24, 0xFE	; 254
    1372:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    1374:	af e4       	ldi	r26, 0x4F	; 79
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e4       	ldi	r30, 0x4F	; 79
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8d 7f       	andi	r24, 0xFD	; 253
    1380:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    1382:	ae e4       	ldi	r26, 0x4E	; 78
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ee e4       	ldi	r30, 0x4E	; 78
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 60       	ori	r24, 0x08	; 8
    138e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    1390:	ae e4       	ldi	r26, 0x4E	; 78
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee e4       	ldi	r30, 0x4E	; 78
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 7e       	andi	r24, 0xEF	; 239
    139c:	8c 93       	st	X, r24
    139e:	21 c1       	rjmp	.+578    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_FAST_MODE_8:
            // Fast PWM, 8-bit: WGM13 = 0, WGM12 = 1, WGM11 = 0, WGM10 = 1
            SET_BIT(TCCR1A, WGM10);
    13a0:	af e4       	ldi	r26, 0x4F	; 79
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ef e4       	ldi	r30, 0x4F	; 79
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    13ae:	af e4       	ldi	r26, 0x4F	; 79
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ef e4       	ldi	r30, 0x4F	; 79
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8d 7f       	andi	r24, 0xFD	; 253
    13ba:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    13bc:	ae e4       	ldi	r26, 0x4E	; 78
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ee e4       	ldi	r30, 0x4E	; 78
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    13ca:	ae e4       	ldi	r26, 0x4E	; 78
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ee e4       	ldi	r30, 0x4E	; 78
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7e       	andi	r24, 0xEF	; 239
    13d6:	8c 93       	st	X, r24
    13d8:	04 c1       	rjmp	.+520    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_FAST_MODE_9:
            // Fast PWM, 9-bit: WGM13 = 0, WGM12 = 1, WGM11 = 1, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    13da:	af e4       	ldi	r26, 0x4F	; 79
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ef e4       	ldi	r30, 0x4F	; 79
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    13e8:	af e4       	ldi	r26, 0x4F	; 79
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ef e4       	ldi	r30, 0x4F	; 79
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    13f6:	ae e4       	ldi	r26, 0x4E	; 78
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ee e4       	ldi	r30, 0x4E	; 78
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	88 60       	ori	r24, 0x08	; 8
    1402:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    1404:	ae e4       	ldi	r26, 0x4E	; 78
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ee e4       	ldi	r30, 0x4E	; 78
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 7e       	andi	r24, 0xEF	; 239
    1410:	8c 93       	st	X, r24
    1412:	e7 c0       	rjmp	.+462    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_FAST_MODE_10:
            // Fast PWM, 10-bit: WGM13 = 0, WGM12 = 1, WGM11 = 1, WGM10 = 1
            SET_BIT(TCCR1A, WGM10);
    1414:	af e4       	ldi	r26, 0x4F	; 79
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ef e4       	ldi	r30, 0x4F	; 79
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    1422:	af e4       	ldi	r26, 0x4F	; 79
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ef e4       	ldi	r30, 0x4F	; 79
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    1430:	ae e4       	ldi	r26, 0x4E	; 78
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ee e4       	ldi	r30, 0x4E	; 78
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	88 60       	ori	r24, 0x08	; 8
    143c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    143e:	ae e4       	ldi	r26, 0x4E	; 78
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	ee e4       	ldi	r30, 0x4E	; 78
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 7e       	andi	r24, 0xEF	; 239
    144a:	8c 93       	st	X, r24
    144c:	ca c0       	rjmp	.+404    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR_IS_TOP:
            // Phase Frequency Correct PWM, ICR as top: WGM13 = 1, WGM12 = 0, WGM11 = 0, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    144e:	af e4       	ldi	r26, 0x4F	; 79
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ef e4       	ldi	r30, 0x4F	; 79
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8e 7f       	andi	r24, 0xFE	; 254
    145a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    145c:	af e4       	ldi	r26, 0x4F	; 79
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ef e4       	ldi	r30, 0x4F	; 79
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8d 7f       	andi	r24, 0xFD	; 253
    1468:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    146a:	ae e4       	ldi	r26, 0x4E	; 78
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ee e4       	ldi	r30, 0x4E	; 78
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	87 7f       	andi	r24, 0xF7	; 247
    1476:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    1478:	ae e4       	ldi	r26, 0x4E	; 78
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ee e4       	ldi	r30, 0x4E	; 78
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 61       	ori	r24, 0x10	; 16
    1484:	8c 93       	st	X, r24
    1486:	ad c0       	rjmp	.+346    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_FREQ_CORRECT_OCRA_IS_TOP:
            // Phase Frequency Correct PWM, OCRA as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    1488:	af e4       	ldi	r26, 0x4F	; 79
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ef e4       	ldi	r30, 0x4F	; 79
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8e 7f       	andi	r24, 0xFE	; 254
    1494:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    1496:	af e4       	ldi	r26, 0x4F	; 79
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ef e4       	ldi	r30, 0x4F	; 79
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	82 60       	ori	r24, 0x02	; 2
    14a2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    14a4:	ae e4       	ldi	r26, 0x4E	; 78
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ee e4       	ldi	r30, 0x4E	; 78
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	87 7f       	andi	r24, 0xF7	; 247
    14b0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    14b2:	ae e4       	ldi	r26, 0x4E	; 78
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ee e4       	ldi	r30, 0x4E	; 78
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 61       	ori	r24, 0x10	; 16
    14be:	8c 93       	st	X, r24
    14c0:	90 c0       	rjmp	.+288    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_CORRECT_ICR_IS_TOP:
            // Phase Correct PWM, ICR as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    14c2:	af e4       	ldi	r26, 0x4F	; 79
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ef e4       	ldi	r30, 0x4F	; 79
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    14d0:	af e4       	ldi	r26, 0x4F	; 79
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ef e4       	ldi	r30, 0x4F	; 79
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ee e4       	ldi	r30, 0x4E	; 78
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	87 7f       	andi	r24, 0xF7	; 247
    14ea:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 61       	ori	r24, 0x10	; 16
    14f8:	8c 93       	st	X, r24
    14fa:	73 c0       	rjmp	.+230    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_PHASE_CORRECT_OCRA_IS_TOP:
            // Phase Correct PWM, OCRA as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 1
            SET_BIT(TCCR1A, WGM10);
    14fc:	af e4       	ldi	r26, 0x4F	; 79
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ef e4       	ldi	r30, 0x4F	; 79
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    150a:	af e4       	ldi	r26, 0x4F	; 79
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e4       	ldi	r30, 0x4F	; 79
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	82 60       	ori	r24, 0x02	; 2
    1516:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM12);
    1518:	ae e4       	ldi	r26, 0x4E	; 78
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ee e4       	ldi	r30, 0x4E	; 78
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	87 7f       	andi	r24, 0xF7	; 247
    1524:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    1526:	ae e4       	ldi	r26, 0x4E	; 78
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
    1534:	56 c0       	rjmp	.+172    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_CTC_MODE_ICR_IS_TOP:
            // CTC with ICR as top: WGM13 = 1, WGM12 = 1, WGM11 = 0, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    1536:	af e4       	ldi	r26, 0x4F	; 79
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ef e4       	ldi	r30, 0x4F	; 79
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8e 7f       	andi	r24, 0xFE	; 254
    1542:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    1544:	af e4       	ldi	r26, 0x4F	; 79
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ef e4       	ldi	r30, 0x4F	; 79
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8d 7f       	andi	r24, 0xFD	; 253
    1550:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    1552:	ae e4       	ldi	r26, 0x4E	; 78
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ee e4       	ldi	r30, 0x4E	; 78
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    1560:	ae e4       	ldi	r26, 0x4E	; 78
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ee e4       	ldi	r30, 0x4E	; 78
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 61       	ori	r24, 0x10	; 16
    156c:	8c 93       	st	X, r24
    156e:	39 c0       	rjmp	.+114    	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_FAST_MODE_ICR_IS_TOP:
            // Fast PWM, ICR as top: WGM13 = 1, WGM12 = 1, WGM11 = 0, WGM10 = 1
            SET_BIT(TCCR1A, WGM10);
    1570:	af e4       	ldi	r26, 0x4F	; 79
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ef e4       	ldi	r30, 0x4F	; 79
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    157e:	af e4       	ldi	r26, 0x4F	; 79
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ef e4       	ldi	r30, 0x4F	; 79
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8d 7f       	andi	r24, 0xFD	; 253
    158a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    158c:	ae e4       	ldi	r26, 0x4E	; 78
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ee e4       	ldi	r30, 0x4E	; 78
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    159a:	ae e4       	ldi	r26, 0x4E	; 78
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e4       	ldi	r30, 0x4E	; 78
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 61       	ori	r24, 0x10	; 16
    15a6:	8c 93       	st	X, r24
    15a8:	1c c0       	rjmp	.+56     	; 0x15e2 <vTimer1_SetMode+0x43a>
            break;

        case TIMER1_PWM_FAST_MODE_OCRA_IS_TOP:
            // Fast PWM, OCRA as top: WGM13 = 1, WGM12 = 1, WGM11 = 1, WGM10 = 0
            CLR_BIT(TCCR1A, WGM10);
    15aa:	af e4       	ldi	r26, 0x4F	; 79
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ef e4       	ldi	r30, 0x4F	; 79
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8e 7f       	andi	r24, 0xFE	; 254
    15b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, WGM11);
    15b8:	af e4       	ldi	r26, 0x4F	; 79
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ef e4       	ldi	r30, 0x4F	; 79
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    15c6:	ae e4       	ldi	r26, 0x4E	; 78
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ee e4       	ldi	r30, 0x4E	; 78
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	88 60       	ori	r24, 0x08	; 8
    15d2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM13);
    15d4:	ae e4       	ldi	r26, 0x4E	; 78
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ee e4       	ldi	r30, 0x4E	; 78
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 61       	ori	r24, 0x10	; 16
    15e0:	8c 93       	st	X, r24

        default:
            // Invalid mode
            break;
    }
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <vTimer1_OC1A_SetMode>:


void vTimer1_OC1A_SetMode(u8 mode)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <vTimer1_OC1A_SetMode+0x6>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3b 83       	std	Y+3, r19	; 0x03
    1604:	2a 83       	std	Y+2, r18	; 0x02
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	21 f1       	breq	.+72     	; 0x1658 <vTimer1_OC1A_SetMode+0x6a>
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	3b 81       	ldd	r19, Y+3	; 0x03
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <vTimer1_OC1A_SetMode+0x36>
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <vTimer1_OC1A_SetMode+0x4c>
    1622:	46 c0       	rjmp	.+140    	; 0x16b0 <vTimer1_OC1A_SetMode+0xc2>
    1624:	2a 81       	ldd	r18, Y+2	; 0x02
    1626:	3b 81       	ldd	r19, Y+3	; 0x03
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	21 f1       	breq	.+72     	; 0x1676 <vTimer1_OC1A_SetMode+0x88>
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	71 f1       	breq	.+92     	; 0x1694 <vTimer1_OC1A_SetMode+0xa6>
    1638:	3b c0       	rjmp	.+118    	; 0x16b0 <vTimer1_OC1A_SetMode+0xc2>
	{
	case TIMER_OC_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1A0);
    163a:	af e4       	ldi	r26, 0x4F	; 79
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ef e4       	ldi	r30, 0x4F	; 79
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    1648:	af e4       	ldi	r26, 0x4F	; 79
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ef e4       	ldi	r30, 0x4F	; 79
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 77       	andi	r24, 0x7F	; 127
    1654:	8c 93       	st	X, r24
    1656:	2c c0       	rjmp	.+88     	; 0x16b0 <vTimer1_OC1A_SetMode+0xc2>
		break;

	case TIMER_OC_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    1658:	af e4       	ldi	r26, 0x4F	; 79
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ef e4       	ldi	r30, 0x4F	; 79
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 64       	ori	r24, 0x40	; 64
    1664:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    1666:	af e4       	ldi	r26, 0x4F	; 79
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 77       	andi	r24, 0x7F	; 127
    1672:	8c 93       	st	X, r24
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <vTimer1_OC1A_SetMode+0xc2>
		break;

	case TIMER_OC_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1A0);
    1676:	af e4       	ldi	r26, 0x4F	; 79
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ef e4       	ldi	r30, 0x4F	; 79
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8f 7b       	andi	r24, 0xBF	; 191
    1682:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1684:	af e4       	ldi	r26, 0x4F	; 79
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ef e4       	ldi	r30, 0x4F	; 79
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 68       	ori	r24, 0x80	; 128
    1690:	8c 93       	st	X, r24
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <vTimer1_OC1A_SetMode+0xc2>
		break;

	case TIMER_OC_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1694:	af e4       	ldi	r26, 0x4F	; 79
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ef e4       	ldi	r30, 0x4F	; 79
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 64       	ori	r24, 0x40	; 64
    16a0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    16a2:	af e4       	ldi	r26, 0x4F	; 79
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ef e4       	ldi	r30, 0x4F	; 79
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	8c 93       	st	X, r24

	default:
		/*error handling*/
		break;
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <vTimer1_OC1B_SetMode>:

void vTimer1_OC1B_SetMode(u8 mode)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <vTimer1_OC1B_SetMode+0x6>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3b 83       	std	Y+3, r19	; 0x03
    16d2:	2a 83       	std	Y+2, r18	; 0x02
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	21 f1       	breq	.+72     	; 0x1726 <vTimer1_OC1B_SetMode+0x6a>
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <vTimer1_OC1B_SetMode+0x36>
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <vTimer1_OC1B_SetMode+0x4c>
    16f0:	46 c0       	rjmp	.+140    	; 0x177e <vTimer1_OC1B_SetMode+0xc2>
    16f2:	2a 81       	ldd	r18, Y+2	; 0x02
    16f4:	3b 81       	ldd	r19, Y+3	; 0x03
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	21 f1       	breq	.+72     	; 0x1744 <vTimer1_OC1B_SetMode+0x88>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	71 f1       	breq	.+92     	; 0x1762 <vTimer1_OC1B_SetMode+0xa6>
    1706:	3b c0       	rjmp	.+118    	; 0x177e <vTimer1_OC1B_SetMode+0xc2>
	{
	case TIMER_OC_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1B0);
    1708:	af e4       	ldi	r26, 0x4F	; 79
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ef e4       	ldi	r30, 0x4F	; 79
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7e       	andi	r24, 0xEF	; 239
    1714:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    1716:	af e4       	ldi	r26, 0x4F	; 79
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ef e4       	ldi	r30, 0x4F	; 79
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7d       	andi	r24, 0xDF	; 223
    1722:	8c 93       	st	X, r24
    1724:	2c c0       	rjmp	.+88     	; 0x177e <vTimer1_OC1B_SetMode+0xc2>
		break;

	case TIMER_OC_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    1726:	af e4       	ldi	r26, 0x4F	; 79
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ef e4       	ldi	r30, 0x4F	; 79
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 61       	ori	r24, 0x10	; 16
    1732:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    1734:	af e4       	ldi	r26, 0x4F	; 79
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ef e4       	ldi	r30, 0x4F	; 79
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	8c 93       	st	X, r24
    1742:	1d c0       	rjmp	.+58     	; 0x177e <vTimer1_OC1B_SetMode+0xc2>
		break;

	case TIMER_OC_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1B0);
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7e       	andi	r24, 0xEF	; 239
    1750:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1752:	af e4       	ldi	r26, 0x4F	; 79
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ef e4       	ldi	r30, 0x4F	; 79
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	8c 93       	st	X, r24
    1760:	0e c0       	rjmp	.+28     	; 0x177e <vTimer1_OC1B_SetMode+0xc2>
		break;

	case TIMER_OC_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1762:	af e4       	ldi	r26, 0x4F	; 79
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ef e4       	ldi	r30, 0x4F	; 79
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 61       	ori	r24, 0x10	; 16
    176e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1770:	af e4       	ldi	r26, 0x4F	; 79
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ef e4       	ldi	r30, 0x4F	; 79
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	80 62       	ori	r24, 0x20	; 32
    177c:	8c 93       	st	X, r24
		break;

	default:
		/*error handling*/
		break;
	}}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <vTimer1_SetPreLoad>:

void vTimer1_SetPreLoad(u16 value)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <vTimer1_SetPreLoad+0x6>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    1798:	ec e4       	ldi	r30, 0x4C	; 76
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <vTimer1_SetOCR_A_Value>:

void vTimer1_SetOCR_A_Value(u16 value)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <vTimer1_SetOCR_A_Value+0x6>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = value;
    17bc:	ea e4       	ldi	r30, 0x4A	; 74
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <vTimer1_SetOCR_B_Value>:

void vTimer1_SetOCR_B_Value(u16 value)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <vTimer1_SetOCR_B_Value+0x6>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = value;
    17e0:	e8 e4       	ldi	r30, 0x48	; 72
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <vTimer1_SetICR_Value>:

void vTimer1_SetICR_Value(u16 value)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <vTimer1_SetICR_Value+0x6>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1804:	e6 e4       	ldi	r30, 0x46	; 70
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <vTimer1_OVF_InterruptEnable>:

void vTimer1_OVF_InterruptEnable(void)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    1822:	a9 e5       	ldi	r26, 0x59	; 89
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e9 e5       	ldi	r30, 0x59	; 89
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	8c 93       	st	X, r24
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <vTimer1_OVF_InterruptDisable>:

void vTimer1_OVF_InterruptDisable(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
    183e:	a9 e5       	ldi	r26, 0x59	; 89
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e9 e5       	ldi	r30, 0x59	; 89
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8b 7f       	andi	r24, 0xFB	; 251
    184a:	8c 93       	st	X, r24
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <vTimer1_OCM_A_InterruptEnable>:

void vTimer1_OCM_A_InterruptEnable(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    185a:	a9 e5       	ldi	r26, 0x59	; 89
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e9 e5       	ldi	r30, 0x59	; 89
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 61       	ori	r24, 0x10	; 16
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <vTimer1_OCM_A_InterruptDisable>:

void vTimer1_OCM_A_InterruptDisable(void)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
    1876:	a9 e5       	ldi	r26, 0x59	; 89
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e9 e5       	ldi	r30, 0x59	; 89
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7e       	andi	r24, 0xEF	; 239
    1882:	8c 93       	st	X, r24
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <vTimer1_OCM_B_InterruptEnable>:

void vTimer1_OCM_B_InterruptEnable(void)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    1892:	a9 e5       	ldi	r26, 0x59	; 89
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e9 e5       	ldi	r30, 0x59	; 89
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	8c 93       	st	X, r24
}
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <vTimer1_OCM_B_InterruptDisable>:

void vTimer1_OCM_B_InterruptDisable(void)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
    18ae:	a9 e5       	ldi	r26, 0x59	; 89
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e9 e5       	ldi	r30, 0x59	; 89
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	87 7f       	andi	r24, 0xF7	; 247
    18ba:	8c 93       	st	X, r24
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <vTimer1_PrescalerSelect>:

void vTimer1_PrescalerSelect(u8 prescaler)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <vTimer1_PrescalerSelect+0x6>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
    switch (prescaler)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3b 83       	std	Y+3, r19	; 0x03
    18d8:	2a 83       	std	Y+2, r18	; 0x02
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <vTimer1_PrescalerSelect+0x24>
    18e4:	49 c0       	rjmp	.+146    	; 0x1978 <vTimer1_PrescalerSelect+0xb6>
    18e6:	2a 81       	ldd	r18, Y+2	; 0x02
    18e8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ea:	24 30       	cpi	r18, 0x04	; 4
    18ec:	31 05       	cpc	r19, r1
    18ee:	5c f4       	brge	.+22     	; 0x1906 <vTimer1_PrescalerSelect+0x44>
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	9b 81       	ldd	r25, Y+3	; 0x03
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	99 f0       	breq	.+38     	; 0x1920 <vTimer1_PrescalerSelect+0x5e>
    18fa:	2a 81       	ldd	r18, Y+2	; 0x02
    18fc:	3b 81       	ldd	r19, Y+3	; 0x03
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	21 f1       	breq	.+72     	; 0x194c <vTimer1_PrescalerSelect+0x8a>
    1904:	7a c0       	rjmp	.+244    	; 0x19fa <vTimer1_PrescalerSelect+0x138>
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	91 05       	cpc	r25, r1
    190e:	09 f4       	brne	.+2      	; 0x1912 <vTimer1_PrescalerSelect+0x50>
    1910:	49 c0       	rjmp	.+146    	; 0x19a4 <vTimer1_PrescalerSelect+0xe2>
    1912:	2a 81       	ldd	r18, Y+2	; 0x02
    1914:	3b 81       	ldd	r19, Y+3	; 0x03
    1916:	25 30       	cpi	r18, 0x05	; 5
    1918:	31 05       	cpc	r19, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <vTimer1_PrescalerSelect+0x5c>
    191c:	59 c0       	rjmp	.+178    	; 0x19d0 <vTimer1_PrescalerSelect+0x10e>
    191e:	6d c0       	rjmp	.+218    	; 0x19fa <vTimer1_PrescalerSelect+0x138>
    {
        case TIMER_SCALER_1:
            SET_BIT(TCCR1B,CS10);
    1920:	ae e4       	ldi	r26, 0x4E	; 78
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ee e4       	ldi	r30, 0x4E	; 78
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	81 60       	ori	r24, 0x01	; 1
    192c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS11);
    192e:	ae e4       	ldi	r26, 0x4E	; 78
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	ee e4       	ldi	r30, 0x4E	; 78
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8d 7f       	andi	r24, 0xFD	; 253
    193a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS12);
    193c:	ae e4       	ldi	r26, 0x4E	; 78
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ee e4       	ldi	r30, 0x4E	; 78
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8b 7f       	andi	r24, 0xFB	; 251
    1948:	8c 93       	st	X, r24
    194a:	57 c0       	rjmp	.+174    	; 0x19fa <vTimer1_PrescalerSelect+0x138>
            break;
        case TIMER_SCALER_8:
            CLR_BIT(TCCR1B,CS10);
    194c:	ae e4       	ldi	r26, 0x4E	; 78
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8e 7f       	andi	r24, 0xFE	; 254
    1958:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,CS11);
    195a:	ae e4       	ldi	r26, 0x4E	; 78
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ee e4       	ldi	r30, 0x4E	; 78
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	82 60       	ori	r24, 0x02	; 2
    1966:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS12);
    1968:	ae e4       	ldi	r26, 0x4E	; 78
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ee e4       	ldi	r30, 0x4E	; 78
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8b 7f       	andi	r24, 0xFB	; 251
    1974:	8c 93       	st	X, r24
    1976:	41 c0       	rjmp	.+130    	; 0x19fa <vTimer1_PrescalerSelect+0x138>
            break;
        case TIMER_SCALER_64:
            SET_BIT(TCCR1B,CS10);
    1978:	ae e4       	ldi	r26, 0x4E	; 78
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ee e4       	ldi	r30, 0x4E	; 78
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,CS11);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	82 60       	ori	r24, 0x02	; 2
    1992:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS12);
    1994:	ae e4       	ldi	r26, 0x4E	; 78
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ee e4       	ldi	r30, 0x4E	; 78
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	8b 7f       	andi	r24, 0xFB	; 251
    19a0:	8c 93       	st	X, r24
    19a2:	2b c0       	rjmp	.+86     	; 0x19fa <vTimer1_PrescalerSelect+0x138>
            break;
        case TIMER_SCALER_256:
            CLR_BIT(TCCR1B,CS10);
    19a4:	ae e4       	ldi	r26, 0x4E	; 78
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ee e4       	ldi	r30, 0x4E	; 78
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8e 7f       	andi	r24, 0xFE	; 254
    19b0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS11);
    19b2:	ae e4       	ldi	r26, 0x4E	; 78
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ee e4       	ldi	r30, 0x4E	; 78
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8d 7f       	andi	r24, 0xFD	; 253
    19be:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,CS12);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	84 60       	ori	r24, 0x04	; 4
    19cc:	8c 93       	st	X, r24
    19ce:	15 c0       	rjmp	.+42     	; 0x19fa <vTimer1_PrescalerSelect+0x138>
            break;
        case TIMER_SCALER_1024:
            SET_BIT(TCCR1B,CS10);
    19d0:	ae e4       	ldi	r26, 0x4E	; 78
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ee e4       	ldi	r30, 0x4E	; 78
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	81 60       	ori	r24, 0x01	; 1
    19dc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,CS11);
    19de:	ae e4       	ldi	r26, 0x4E	; 78
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ee e4       	ldi	r30, 0x4E	; 78
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,CS12);
    19ec:	ae e4       	ldi	r26, 0x4E	; 78
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ee e4       	ldi	r30, 0x4E	; 78
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	84 60       	ori	r24, 0x04	; 4
    19f8:	8c 93       	st	X, r24
            break;
        default:
            // Error handling
            break;
    }
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <vTIMER2_Init>:
/**********************************Timer 2**************************************/

// Timer2 Initialization
void vTIMER2_Init(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    /*1. Select Mode*/
    vTimer2_SetMode(TIMER2_MODE);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTimer2_SetMode>

    /*2- Select OC2 Pin Mode*/
    vTimer2_OC2_SetMode(TIMER2_OC2_MODE);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <vTimer2_OC2_SetMode>

    /*3- Set Pre-load "Initial Counting Value" Value*/
    vTimer2_SetPreLoad(TIMER2_INITIAL_VALUE);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vTimer2_SetPreLoad>

    /*4- Set Compare Match Value*/
    vTimer2_SetOCRValue(TIMER2_OCR2_VALUE);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vTimer2_SetOCRValue>

    /*5- Enable/ Disable OV Interrupt*/
    vTimer2_OVF_InterruptDisable();
    1a26:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <vTimer2_OVF_InterruptDisable>

    /*6- Enable/ Disable OC Interrupt*/
    vTimer2_OCM_InterruptDisable();
    1a2a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <vTimer2_OCM_InterruptDisable>
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <vTIMER2_Start>:

// Timer2 Start
void vTIMER2_Start(void)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    vTimer2_PrescalerSelect(TIMER2_PRESCALER);
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <vTimer2_PrescalerSelect>
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <vTIMER2_Stop>:

// Timer2 Stop
void vTIMER2_Stop(void)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR2, CS20);
    1a50:	a5 e4       	ldi	r26, 0x45	; 69
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e4       	ldi	r30, 0x45	; 69
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	8c 93       	st	X, r24
    CLR_BIT(TCCR2, CS21);
    1a5e:	a5 e4       	ldi	r26, 0x45	; 69
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e4       	ldi	r30, 0x45	; 69
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8d 7f       	andi	r24, 0xFD	; 253
    1a6a:	8c 93       	st	X, r24
    CLR_BIT(TCCR2, CS22);
    1a6c:	a5 e4       	ldi	r26, 0x45	; 69
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e4       	ldi	r30, 0x45	; 69
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8b 7f       	andi	r24, 0xFB	; 251
    1a78:	8c 93       	st	X, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <vTimer2_SetPreLoad>:

// Set Timer2 Pre-load
void vTimer2_SetPreLoad(u8 value)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = value;
    1a8c:	e4 e4       	ldi	r30, 0x44	; 68
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	80 83       	st	Z, r24
}
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <vTimer2_SetOCRValue>:

// Set Timer2 Compare Match Value
void vTimer2_SetOCRValue(u8 value)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = value;
    1aa8:	e3 e4       	ldi	r30, 0x43	; 67
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	80 83       	st	Z, r24
}
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <vTimer2_SetMode>:

// Set Timer2 Mode
void vTimer2_SetMode(u8 mode)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <vTimer2_SetMode+0x6>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    switch(mode)
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	3b 83       	std	Y+3, r19	; 0x03
    1ace:	2a 83       	std	Y+2, r18	; 0x02
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	21 f1       	breq	.+72     	; 0x1b22 <vTimer2_SetMode+0x6a>
    1ada:	2a 81       	ldd	r18, Y+2	; 0x02
    1adc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <vTimer2_SetMode+0x36>
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <vTimer2_SetMode+0x4c>
    1aec:	46 c0       	rjmp	.+140    	; 0x1b7a <vTimer2_SetMode+0xc2>
    1aee:	2a 81       	ldd	r18, Y+2	; 0x02
    1af0:	3b 81       	ldd	r19, Y+3	; 0x03
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	21 f1       	breq	.+72     	; 0x1b40 <vTimer2_SetMode+0x88>
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	71 f1       	breq	.+92     	; 0x1b5e <vTimer2_SetMode+0xa6>
    1b02:	3b c0       	rjmp	.+118    	; 0x1b7a <vTimer2_SetMode+0xc2>
    {
        case TIMER2_NORMAL_MODE:
            CLR_BIT(TCCR2, WGM20);
    1b04:	a5 e4       	ldi	r26, 0x45	; 69
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e4       	ldi	r30, 0x45	; 69
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8f 7b       	andi	r24, 0xBF	; 191
    1b10:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, WGM21);
    1b12:	a5 e4       	ldi	r26, 0x45	; 69
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e4       	ldi	r30, 0x45	; 69
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	87 7f       	andi	r24, 0xF7	; 247
    1b1e:	8c 93       	st	X, r24
    1b20:	2c c0       	rjmp	.+88     	; 0x1b7a <vTimer2_SetMode+0xc2>
            break;

        case TIMER2_PWM_PHASE_CORRECT_MODE:
            SET_BIT(TCCR2, WGM20);
    1b22:	a5 e4       	ldi	r26, 0x45	; 69
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e4       	ldi	r30, 0x45	; 69
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, WGM21);
    1b30:	a5 e4       	ldi	r26, 0x45	; 69
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e4       	ldi	r30, 0x45	; 69
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	87 7f       	andi	r24, 0xF7	; 247
    1b3c:	8c 93       	st	X, r24
    1b3e:	1d c0       	rjmp	.+58     	; 0x1b7a <vTimer2_SetMode+0xc2>
            break;

        case TIMER2_CTC_MODE:
            CLR_BIT(TCCR2, WGM20);
    1b40:	a5 e4       	ldi	r26, 0x45	; 69
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e4       	ldi	r30, 0x45	; 69
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7b       	andi	r24, 0xBF	; 191
    1b4c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, WGM21);
    1b4e:	a5 e4       	ldi	r26, 0x45	; 69
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e5 e4       	ldi	r30, 0x45	; 69
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	88 60       	ori	r24, 0x08	; 8
    1b5a:	8c 93       	st	X, r24
    1b5c:	0e c0       	rjmp	.+28     	; 0x1b7a <vTimer2_SetMode+0xc2>
            break;

        case TIMER2_FASTPWM_MODE:
            SET_BIT(TCCR2, WGM20);
    1b5e:	a5 e4       	ldi	r26, 0x45	; 69
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 e4       	ldi	r30, 0x45	; 69
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	8c 93       	st	X, r24
            SET_BIT(TCCR2, WGM21);
    1b6c:	a5 e4       	ldi	r26, 0x45	; 69
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e5 e4       	ldi	r30, 0x45	; 69
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	88 60       	ori	r24, 0x08	; 8
    1b78:	8c 93       	st	X, r24

        default:
            // Error handling
            break;
    }
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <vTimer2_OC2_SetMode>:

// Set Timer2 OC2 Mode
void vTimer2_OC2_SetMode(u8 mode)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <vTimer2_OC2_SetMode+0x6>
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	89 83       	std	Y+1, r24	; 0x01
    switch(mode)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3b 83       	std	Y+3, r19	; 0x03
    1b9c:	2a 83       	std	Y+2, r18	; 0x02
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	21 f1       	breq	.+72     	; 0x1bf0 <vTimer2_OC2_SetMode+0x6a>
    1ba8:	2a 81       	ldd	r18, Y+2	; 0x02
    1baa:	3b 81       	ldd	r19, Y+3	; 0x03
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <vTimer2_OC2_SetMode+0x36>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <vTimer2_OC2_SetMode+0x4c>
    1bba:	46 c0       	rjmp	.+140    	; 0x1c48 <vTimer2_OC2_SetMode+0xc2>
    1bbc:	2a 81       	ldd	r18, Y+2	; 0x02
    1bbe:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	21 f1       	breq	.+72     	; 0x1c0e <vTimer2_OC2_SetMode+0x88>
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	71 f1       	breq	.+92     	; 0x1c2c <vTimer2_OC2_SetMode+0xa6>
    1bd0:	3b c0       	rjmp	.+118    	; 0x1c48 <vTimer2_OC2_SetMode+0xc2>
    {
        case TIMER_OC_DISCONNECTED:
            CLR_BIT(TCCR2, COM20);
    1bd2:	a5 e4       	ldi	r26, 0x45	; 69
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e5 e4       	ldi	r30, 0x45	; 69
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8f 7e       	andi	r24, 0xEF	; 239
    1bde:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, COM21);
    1be0:	a5 e4       	ldi	r26, 0x45	; 69
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e4       	ldi	r30, 0x45	; 69
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 7d       	andi	r24, 0xDF	; 223
    1bec:	8c 93       	st	X, r24
    1bee:	2c c0       	rjmp	.+88     	; 0x1c48 <vTimer2_OC2_SetMode+0xc2>
            break;

        case TIMER_OC_TOGGLE:
            SET_BIT(TCCR2, COM20);
    1bf0:	a5 e4       	ldi	r26, 0x45	; 69
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e4       	ldi	r30, 0x45	; 69
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 61       	ori	r24, 0x10	; 16
    1bfc:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, COM21);
    1bfe:	a5 e4       	ldi	r26, 0x45	; 69
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e5 e4       	ldi	r30, 0x45	; 69
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8f 7d       	andi	r24, 0xDF	; 223
    1c0a:	8c 93       	st	X, r24
    1c0c:	1d c0       	rjmp	.+58     	; 0x1c48 <vTimer2_OC2_SetMode+0xc2>
            break;

        case TIMER_OC_NON_INVERTING:
            CLR_BIT(TCCR2, COM20);
    1c0e:	a5 e4       	ldi	r26, 0x45	; 69
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e5 e4       	ldi	r30, 0x45	; 69
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 7e       	andi	r24, 0xEF	; 239
    1c1a:	8c 93       	st	X, r24
            SET_BIT(TCCR2, COM21);
    1c1c:	a5 e4       	ldi	r26, 0x45	; 69
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e5 e4       	ldi	r30, 0x45	; 69
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 62       	ori	r24, 0x20	; 32
    1c28:	8c 93       	st	X, r24
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <vTimer2_OC2_SetMode+0xc2>
            break;

        case TIMER_OC_INVERTING:
            SET_BIT(TCCR2, COM20);
    1c2c:	a5 e4       	ldi	r26, 0x45	; 69
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e5 e4       	ldi	r30, 0x45	; 69
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 61       	ori	r24, 0x10	; 16
    1c38:	8c 93       	st	X, r24
            SET_BIT(TCCR2, COM21);
    1c3a:	a5 e4       	ldi	r26, 0x45	; 69
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e5 e4       	ldi	r30, 0x45	; 69
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 62       	ori	r24, 0x20	; 32
    1c46:	8c 93       	st	X, r24

        default:
            // Error handling
            break;
    }
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <vTimer2_OVF_InterruptEnable>:

// Timer2 OVF Interrupt Enable
void vTimer2_OVF_InterruptEnable(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE2);
    1c5c:	a9 e5       	ldi	r26, 0x59	; 89
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e9 e5       	ldi	r30, 0x59	; 89
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	80 64       	ori	r24, 0x40	; 64
    1c68:	8c 93       	st	X, r24
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <vTimer2_OVF_InterruptDisable>:

// Timer2 OVF Interrupt Disable
void vTimer2_OVF_InterruptDisable(void)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE2);
    1c78:	a9 e5       	ldi	r26, 0x59	; 89
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e9 e5       	ldi	r30, 0x59	; 89
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7b       	andi	r24, 0xBF	; 191
    1c84:	8c 93       	st	X, r24
}
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <vTimer2_OCM_InterruptEnable>:

// Timer2 OCM Interrupt Enable
void vTimer2_OCM_InterruptEnable(void)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    1c94:	a9 e5       	ldi	r26, 0x59	; 89
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e9 e5       	ldi	r30, 0x59	; 89
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	8c 93       	st	X, r24
}
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <vTimer2_OCM_InterruptDisable>:

// Timer2 OCM Interrupt Disable
void vTimer2_OCM_InterruptDisable(void)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE2);
    1cb0:	a9 e5       	ldi	r26, 0x59	; 89
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e9 e5       	ldi	r30, 0x59	; 89
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 77       	andi	r24, 0x7F	; 127
    1cbc:	8c 93       	st	X, r24
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <vTimer2_PrescalerSelect>:

// Set Timer2 Prescaler
void vTimer2_PrescalerSelect(u8 prescaler)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <vTimer2_PrescalerSelect+0x6>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    switch(prescaler)
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	3b 83       	std	Y+3, r19	; 0x03
    1cda:	2a 83       	std	Y+2, r18	; 0x02
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	84 30       	cpi	r24, 0x04	; 4
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <vTimer2_PrescalerSelect+0x24>
    1ce6:	6b c0       	rjmp	.+214    	; 0x1dbe <vTimer2_PrescalerSelect+0xfa>
    1ce8:	2a 81       	ldd	r18, Y+2	; 0x02
    1cea:	3b 81       	ldd	r19, Y+3	; 0x03
    1cec:	25 30       	cpi	r18, 0x05	; 5
    1cee:	31 05       	cpc	r19, r1
    1cf0:	8c f4       	brge	.+34     	; 0x1d14 <vTimer2_PrescalerSelect+0x50>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	a9 f1       	breq	.+106    	; 0x1d66 <vTimer2_PrescalerSelect+0xa2>
    1cfc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cfe:	3b 81       	ldd	r19, Y+3	; 0x03
    1d00:	23 30       	cpi	r18, 0x03	; 3
    1d02:	31 05       	cpc	r19, r1
    1d04:	0c f0       	brlt	.+2      	; 0x1d08 <vTimer2_PrescalerSelect+0x44>
    1d06:	45 c0       	rjmp	.+138    	; 0x1d92 <vTimer2_PrescalerSelect+0xce>
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	a1 f0       	breq	.+40     	; 0x1d3a <vTimer2_PrescalerSelect+0x76>
    1d12:	ac c0       	rjmp	.+344    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
    1d14:	2a 81       	ldd	r18, Y+2	; 0x02
    1d16:	3b 81       	ldd	r19, Y+3	; 0x03
    1d18:	26 30       	cpi	r18, 0x06	; 6
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <vTimer2_PrescalerSelect+0x5c>
    1d1e:	7b c0       	rjmp	.+246    	; 0x1e16 <vTimer2_PrescalerSelect+0x152>
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	86 30       	cpi	r24, 0x06	; 6
    1d26:	91 05       	cpc	r25, r1
    1d28:	0c f4       	brge	.+2      	; 0x1d2c <vTimer2_PrescalerSelect+0x68>
    1d2a:	5f c0       	rjmp	.+190    	; 0x1dea <vTimer2_PrescalerSelect+0x126>
    1d2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d30:	27 30       	cpi	r18, 0x07	; 7
    1d32:	31 05       	cpc	r19, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vTimer2_PrescalerSelect+0x74>
    1d36:	85 c0       	rjmp	.+266    	; 0x1e42 <vTimer2_PrescalerSelect+0x17e>
    1d38:	99 c0       	rjmp	.+306    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
    {
        case TIMER2_SCALER_1:
            SET_BIT(TCCR2, CS20);
    1d3a:	a5 e4       	ldi	r26, 0x45	; 69
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e4       	ldi	r30, 0x45	; 69
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS21);
    1d48:	a5 e4       	ldi	r26, 0x45	; 69
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e5 e4       	ldi	r30, 0x45	; 69
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	8d 7f       	andi	r24, 0xFD	; 253
    1d54:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS22);
    1d56:	a5 e4       	ldi	r26, 0x45	; 69
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e5 e4       	ldi	r30, 0x45	; 69
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8b 7f       	andi	r24, 0xFB	; 251
    1d62:	8c 93       	st	X, r24
    1d64:	83 c0       	rjmp	.+262    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_8:
            CLR_BIT(TCCR2, CS20);
    1d66:	a5 e4       	ldi	r26, 0x45	; 69
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e5 e4       	ldi	r30, 0x45	; 69
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS21);
    1d74:	a5 e4       	ldi	r26, 0x45	; 69
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e5 e4       	ldi	r30, 0x45	; 69
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	82 60       	ori	r24, 0x02	; 2
    1d80:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS22);
    1d82:	a5 e4       	ldi	r26, 0x45	; 69
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e4       	ldi	r30, 0x45	; 69
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8b 7f       	andi	r24, 0xFB	; 251
    1d8e:	8c 93       	st	X, r24
    1d90:	6d c0       	rjmp	.+218    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_32:
            SET_BIT(TCCR2, CS20);
    1d92:	a5 e4       	ldi	r26, 0x45	; 69
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e5 e4       	ldi	r30, 0x45	; 69
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS21);
    1da0:	a5 e4       	ldi	r26, 0x45	; 69
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e4       	ldi	r30, 0x45	; 69
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	82 60       	ori	r24, 0x02	; 2
    1dac:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS22);
    1dae:	a5 e4       	ldi	r26, 0x45	; 69
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e5 e4       	ldi	r30, 0x45	; 69
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	8b 7f       	andi	r24, 0xFB	; 251
    1dba:	8c 93       	st	X, r24
    1dbc:	57 c0       	rjmp	.+174    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_64:
            CLR_BIT(TCCR2, CS20);
    1dbe:	a5 e4       	ldi	r26, 0x45	; 69
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 e4       	ldi	r30, 0x45	; 69
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8e 7f       	andi	r24, 0xFE	; 254
    1dca:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS21);
    1dcc:	a5 e4       	ldi	r26, 0x45	; 69
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e5 e4       	ldi	r30, 0x45	; 69
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8d 7f       	andi	r24, 0xFD	; 253
    1dd8:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS22);
    1dda:	a5 e4       	ldi	r26, 0x45	; 69
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e4       	ldi	r30, 0x45	; 69
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	84 60       	ori	r24, 0x04	; 4
    1de6:	8c 93       	st	X, r24
    1de8:	41 c0       	rjmp	.+130    	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_128:
            SET_BIT(TCCR2, CS20);
    1dea:	a5 e4       	ldi	r26, 0x45	; 69
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e4       	ldi	r30, 0x45	; 69
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	81 60       	ori	r24, 0x01	; 1
    1df6:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, CS21);
    1df8:	a5 e4       	ldi	r26, 0x45	; 69
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e4       	ldi	r30, 0x45	; 69
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8d 7f       	andi	r24, 0xFD	; 253
    1e04:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS22);
    1e06:	a5 e4       	ldi	r26, 0x45	; 69
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e4       	ldi	r30, 0x45	; 69
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	84 60       	ori	r24, 0x04	; 4
    1e12:	8c 93       	st	X, r24
    1e14:	2b c0       	rjmp	.+86     	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_256:
            CLR_BIT(TCCR2, CS20);
    1e16:	a5 e4       	ldi	r26, 0x45	; 69
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e5 e4       	ldi	r30, 0x45	; 69
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8e 7f       	andi	r24, 0xFE	; 254
    1e22:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS21);
    1e24:	a5 e4       	ldi	r26, 0x45	; 69
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e4       	ldi	r30, 0x45	; 69
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS22);
    1e32:	a5 e4       	ldi	r26, 0x45	; 69
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e5 e4       	ldi	r30, 0x45	; 69
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	84 60       	ori	r24, 0x04	; 4
    1e3e:	8c 93       	st	X, r24
    1e40:	15 c0       	rjmp	.+42     	; 0x1e6c <vTimer2_PrescalerSelect+0x1a8>
            break;
        case TIMER2_SCALER_1024:
            SET_BIT(TCCR2, CS20);
    1e42:	a5 e4       	ldi	r26, 0x45	; 69
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e5 e4       	ldi	r30, 0x45	; 69
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS21);
    1e50:	a5 e4       	ldi	r26, 0x45	; 69
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e5 e4       	ldi	r30, 0x45	; 69
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, CS22);
    1e5e:	a5 e4       	ldi	r26, 0x45	; 69
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e4       	ldi	r30, 0x45	; 69
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	84 60       	ori	r24, 0x04	; 4
    1e6a:	8c 93       	st	X, r24
            break;
        default:
            // Error handling
            break;
    }
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <MGIE_voidEnableInterrupt>:
#include "GIE_Config.h"
#include "GIE_Private.h"
#include "GIE_Interface.h"

void MGIE_voidEnableInterrupt(void)  // GIE = 1
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1e80:	af e5       	ldi	r26, 0x5F	; 95
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ef e5       	ldi	r30, 0x5F	; 95
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 68       	ori	r24, 0x80	; 128
    1e8c:	8c 93       	st	X, r24
}
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <MGIE_voidDisableInterrupt>:

void MGIE_voidDisableInterrupt(void) //GIE=0
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1e9c:	af e5       	ldi	r26, 0x5F	; 95
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ef e5       	ldi	r30, 0x5F	; 95
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8f 77       	andi	r24, 0x7F	; 127
    1ea8:	8c 93       	st	X, r24
}
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <MEXTI_VoidInitpin>:


/// notifiction for INT1

void MEXTI_VoidInitpin(u8 Copy_u8InterruptNum)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <MEXTI_VoidInitpin+0x6>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	89 83       	std	Y+1, r24	; 0x01
	// swich TO CHOOSE interrupt number -- Init PINS thatuse for interrupt  -- internal pull up (pin - INPUT - high )
	// init interrupt pin
	switch (Copy_u8InterruptNum) {
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3b 83       	std	Y+3, r19	; 0x03
    1ec6:	2a 83       	std	Y+2, r18	; 0x02
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	91 05       	cpc	r25, r1
    1ed0:	a1 f0       	breq	.+40     	; 0x1efa <MEXTI_VoidInitpin+0x4a>
    1ed2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	31 05       	cpc	r19, r1
    1eda:	d1 f0       	breq	.+52     	; 0x1f10 <MEXTI_VoidInitpin+0x60>
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	01 f5       	brne	.+64     	; 0x1f24 <MEXTI_VoidInitpin+0x74>
	case EXTI_INT0:

		DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	62 e0       	ldi	r22, 0x02	; 2
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    1ef8:	15 c0       	rjmp	.+42     	; 0x1f24 <MEXTI_VoidInitpin+0x74>

		break;
	case EXTI_INT1:
		DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
    1f04:	83 e0       	ldi	r24, 0x03	; 3
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    1f0e:	0a c0       	rjmp	.+20     	; 0x1f24 <MEXTI_VoidInitpin+0x74>

		break;
	case EXTI_INT2:
		DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>

		break;
	default:
		break;
	}
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <MEXTI_VoidTriggerEdge>:


void MEXTI_VoidTriggerEdge(u8 Copy_u8InterruptNum,u8 Copy_u8Edge)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	2a 97       	sbiw	r28, 0x0a	; 10
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	6a 83       	std	Y+2, r22	; 0x02
	// low level (clr_bit iscx0- clr_bit iscx1)
	// any logical (Set_bit iscx0- clr_bit iscx1)
	// Falling (clr_bit iscx0- set_bit iscx1)
	// Rising  (set_bit iscx0- set_bit iscx1)

	switch(Copy_u8InterruptNum)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3a 87       	std	Y+10, r19	; 0x0a
    1f50:	29 87       	std	Y+9, r18	; 0x09
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <MEXTI_VoidTriggerEdge+0x2e>
    1f5c:	66 c0       	rjmp	.+204    	; 0x202a <MEXTI_VoidTriggerEdge+0xfa>
    1f5e:	29 85       	ldd	r18, Y+9	; 0x09
    1f60:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <MEXTI_VoidTriggerEdge+0x3a>
    1f68:	bb c0       	rjmp	.+374    	; 0x20e0 <MEXTI_VoidTriggerEdge+0x1b0>
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <MEXTI_VoidTriggerEdge+0x44>
    1f72:	d5 c0       	rjmp	.+426    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
	{
	case EXTI_INT0:
		switch (Copy_u8Edge) {
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	38 87       	std	Y+8, r19	; 0x08
    1f7c:	2f 83       	std	Y+7, r18	; 0x07
    1f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f80:	98 85       	ldd	r25, Y+8	; 0x08
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	21 f1       	breq	.+72     	; 0x1fd0 <MEXTI_VoidTriggerEdge+0xa0>
    1f88:	2f 81       	ldd	r18, Y+7	; 0x07
    1f8a:	38 85       	ldd	r19, Y+8	; 0x08
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <MEXTI_VoidTriggerEdge+0x6c>
    1f92:	8f 81       	ldd	r24, Y+7	; 0x07
    1f94:	98 85       	ldd	r25, Y+8	; 0x08
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <MEXTI_VoidTriggerEdge+0x82>
    1f9a:	c1 c0       	rjmp	.+386    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
    1f9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f9e:	38 85       	ldd	r19, Y+8	; 0x08
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	21 f1       	breq	.+72     	; 0x1fee <MEXTI_VoidTriggerEdge+0xbe>
    1fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa8:	98 85       	ldd	r25, Y+8	; 0x08
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	71 f1       	breq	.+92     	; 0x200c <MEXTI_VoidTriggerEdge+0xdc>
    1fb0:	b6 c0       	rjmp	.+364    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1fb2:	a5 e5       	ldi	r26, 0x55	; 85
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e5 e5       	ldi	r30, 0x55	; 85
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8e 7f       	andi	r24, 0xFE	; 254
    1fbe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1fc0:	a5 e5       	ldi	r26, 0x55	; 85
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e5 e5       	ldi	r30, 0x55	; 85
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8d 7f       	andi	r24, 0xFD	; 253
    1fcc:	8c 93       	st	X, r24
    1fce:	a7 c0       	rjmp	.+334    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1fd0:	a5 e5       	ldi	r26, 0x55	; 85
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e5 e5       	ldi	r30, 0x55	; 85
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	81 60       	ori	r24, 0x01	; 1
    1fdc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1fde:	a5 e5       	ldi	r26, 0x55	; 85
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e5 e5       	ldi	r30, 0x55	; 85
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8d 7f       	andi	r24, 0xFD	; 253
    1fea:	8c 93       	st	X, r24
    1fec:	98 c0       	rjmp	.+304    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1fee:	a5 e5       	ldi	r26, 0x55	; 85
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e5 e5       	ldi	r30, 0x55	; 85
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8e 7f       	andi	r24, 0xFE	; 254
    1ffa:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1ffc:	a5 e5       	ldi	r26, 0x55	; 85
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e5 e5       	ldi	r30, 0x55	; 85
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	82 60       	ori	r24, 0x02	; 2
    2008:	8c 93       	st	X, r24
    200a:	89 c0       	rjmp	.+274    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    200c:	a5 e5       	ldi	r26, 0x55	; 85
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e5 e5       	ldi	r30, 0x55	; 85
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    201a:	a5 e5       	ldi	r26, 0x55	; 85
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e5 e5       	ldi	r30, 0x55	; 85
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	8c 93       	st	X, r24
    2028:	7a c0       	rjmp	.+244    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
		default:
			break;
		}
		break;
		case EXTI_INT1:
			switch (Copy_u8Edge) {
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	3e 83       	std	Y+6, r19	; 0x06
    2032:	2d 83       	std	Y+5, r18	; 0x05
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	91 05       	cpc	r25, r1
    203c:	21 f1       	breq	.+72     	; 0x2086 <MEXTI_VoidTriggerEdge+0x156>
    203e:	2d 81       	ldd	r18, Y+5	; 0x05
    2040:	3e 81       	ldd	r19, Y+6	; 0x06
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	2c f4       	brge	.+10     	; 0x2052 <MEXTI_VoidTriggerEdge+0x122>
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	61 f0       	breq	.+24     	; 0x2068 <MEXTI_VoidTriggerEdge+0x138>
    2050:	66 c0       	rjmp	.+204    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
    2052:	2d 81       	ldd	r18, Y+5	; 0x05
    2054:	3e 81       	ldd	r19, Y+6	; 0x06
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	21 f1       	breq	.+72     	; 0x20a4 <MEXTI_VoidTriggerEdge+0x174>
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	91 05       	cpc	r25, r1
    2064:	71 f1       	breq	.+92     	; 0x20c2 <MEXTI_VoidTriggerEdge+0x192>
    2066:	5b c0       	rjmp	.+182    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    2068:	a5 e5       	ldi	r26, 0x55	; 85
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e5 e5       	ldi	r30, 0x55	; 85
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8b 7f       	andi	r24, 0xFB	; 251
    2074:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    2076:	a5 e5       	ldi	r26, 0x55	; 85
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e5 e5       	ldi	r30, 0x55	; 85
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	87 7f       	andi	r24, 0xF7	; 247
    2082:	8c 93       	st	X, r24
    2084:	4c c0       	rjmp	.+152    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    2086:	a5 e5       	ldi	r26, 0x55	; 85
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e5 e5       	ldi	r30, 0x55	; 85
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	84 60       	ori	r24, 0x04	; 4
    2092:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    2094:	a5 e5       	ldi	r26, 0x55	; 85
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e5       	ldi	r30, 0x55	; 85
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	87 7f       	andi	r24, 0xF7	; 247
    20a0:	8c 93       	st	X, r24
    20a2:	3d c0       	rjmp	.+122    	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    20a4:	a5 e5       	ldi	r26, 0x55	; 85
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e5       	ldi	r30, 0x55	; 85
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8b 7f       	andi	r24, 0xFB	; 251
    20b0:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    20b2:	a5 e5       	ldi	r26, 0x55	; 85
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e5 e5       	ldi	r30, 0x55	; 85
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 60       	ori	r24, 0x08	; 8
    20be:	8c 93       	st	X, r24
    20c0:	2e c0       	rjmp	.+92     	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    20c2:	a5 e5       	ldi	r26, 0x55	; 85
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e5 e5       	ldi	r30, 0x55	; 85
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    20d0:	a5 e5       	ldi	r26, 0x55	; 85
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e5 e5       	ldi	r30, 0x55	; 85
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	88 60       	ori	r24, 0x08	; 8
    20dc:	8c 93       	st	X, r24
    20de:	1f c0       	rjmp	.+62     	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
			default:
				break;
			}
			break;
			case EXTI_INT2:
				switch (Copy_u8Edge) {
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3c 83       	std	Y+4, r19	; 0x04
    20e8:	2b 83       	std	Y+3, r18	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	91 05       	cpc	r25, r1
    20f2:	31 f0       	breq	.+12     	; 0x2100 <MEXTI_VoidTriggerEdge+0x1d0>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	23 30       	cpi	r18, 0x03	; 3
    20fa:	31 05       	cpc	r19, r1
    20fc:	49 f0       	breq	.+18     	; 0x2110 <MEXTI_VoidTriggerEdge+0x1e0>
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>


				case FALLING_EDGE:
					CLR_BIT(MCUCSR,MCUCSR_ISC2);
    2100:	a4 e5       	ldi	r26, 0x54	; 84
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e4 e5       	ldi	r30, 0x54	; 84
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8f 7b       	andi	r24, 0xBF	; 191
    210c:	8c 93       	st	X, r24
    210e:	07 c0       	rjmp	.+14     	; 0x211e <MEXTI_VoidTriggerEdge+0x1ee>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,MCUCSR_ISC2);
    2110:	a4 e5       	ldi	r26, 0x54	; 84
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e4 e5       	ldi	r30, 0x54	; 84
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 64       	ori	r24, 0x40	; 64
    211c:	8c 93       	st	X, r24

				default:
					break;
	}

}
    211e:	2a 96       	adiw	r28, 0x0a	; 10
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <MEXTI_VoidEnable>:


void MEXTI_VoidEnable(u8 Copy_u8InterruptNum)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <MEXTI_VoidEnable+0x6>
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptNum)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3b 83       	std	Y+3, r19	; 0x03
    2146:	2a 83       	std	Y+2, r18	; 0x02
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	9b 81       	ldd	r25, Y+3	; 0x03
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	89 f0       	breq	.+34     	; 0x2174 <MEXTI_VoidEnable+0x44>
    2152:	2a 81       	ldd	r18, Y+2	; 0x02
    2154:	3b 81       	ldd	r19, Y+3	; 0x03
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	a1 f0       	breq	.+40     	; 0x2184 <MEXTI_VoidEnable+0x54>
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	9b 81       	ldd	r25, Y+3	; 0x03
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	b9 f4       	brne	.+46     	; 0x2192 <MEXTI_VoidEnable+0x62>
	{
	case EXTI_INT0:
		SET_BIT(GICR,GICR_INT0);
    2164:	ab e5       	ldi	r26, 0x5B	; 91
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	eb e5       	ldi	r30, 0x5B	; 91
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	80 64       	ori	r24, 0x40	; 64
    2170:	8c 93       	st	X, r24
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <MEXTI_VoidEnable+0x62>
		break;
	case EXTI_INT1:
		SET_BIT(GICR,GICR_INT1);
    2174:	ab e5       	ldi	r26, 0x5B	; 91
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	eb e5       	ldi	r30, 0x5B	; 91
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 68       	ori	r24, 0x80	; 128
    2180:	8c 93       	st	X, r24
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <MEXTI_VoidEnable+0x62>
		break;
	case EXTI_INT2:
		SET_BIT(GICR,GICR_INT2);
    2184:	ab e5       	ldi	r26, 0x5B	; 91
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	eb e5       	ldi	r30, 0x5B	; 91
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	80 62       	ori	r24, 0x20	; 32
    2190:	8c 93       	st	X, r24
		break;
	}

}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <MEXTI_VoidDisable>:


void MEXTI_VoidDisable(u8 Copy_u8InterruptNum)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <MEXTI_VoidDisable+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptNum)
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3b 83       	std	Y+3, r19	; 0x03
    21b4:	2a 83       	std	Y+2, r18	; 0x02
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	89 f0       	breq	.+34     	; 0x21e2 <MEXTI_VoidDisable+0x44>
    21c0:	2a 81       	ldd	r18, Y+2	; 0x02
    21c2:	3b 81       	ldd	r19, Y+3	; 0x03
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	a1 f0       	breq	.+40     	; 0x21f2 <MEXTI_VoidDisable+0x54>
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	b9 f4       	brne	.+46     	; 0x2200 <MEXTI_VoidDisable+0x62>
	{
	case EXTI_INT0:
		CLR_BIT(GICR,GICR_INT0);
    21d2:	ab e5       	ldi	r26, 0x5B	; 91
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	eb e5       	ldi	r30, 0x5B	; 91
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	8f 7b       	andi	r24, 0xBF	; 191
    21de:	8c 93       	st	X, r24
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <MEXTI_VoidDisable+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(GICR,GICR_INT1);
    21e2:	ab e5       	ldi	r26, 0x5B	; 91
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	eb e5       	ldi	r30, 0x5B	; 91
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8f 77       	andi	r24, 0x7F	; 127
    21ee:	8c 93       	st	X, r24
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <MEXTI_VoidDisable+0x62>
		break;
	case EXTI_INT2:
		CLR_BIT(GICR,GICR_INT2);
    21f2:	ab e5       	ldi	r26, 0x5B	; 91
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	eb e5       	ldi	r30, 0x5B	; 91
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 7d       	andi	r24, 0xDF	; 223
    21fe:	8c 93       	st	X, r24
		break;
	}
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <EXTI_voidINT0SetCallback>:




void EXTI_voidINT0SetCallback(void (*NotificationFunction)(void))
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <EXTI_voidINT0SetCallback+0x6>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	EXTI_pvoidINT0NotifiFunction = NotificationFunction;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	90 93 85 00 	sts	0x0085, r25
    2222:	80 93 84 00 	sts	0x0084, r24
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <__vector_1>:

/*ISR For INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	2f 93       	push	r18
    223c:	3f 93       	push	r19
    223e:	4f 93       	push	r20
    2240:	5f 93       	push	r21
    2242:	6f 93       	push	r22
    2244:	7f 93       	push	r23
    2246:	8f 93       	push	r24
    2248:	9f 93       	push	r25
    224a:	af 93       	push	r26
    224c:	bf 93       	push	r27
    224e:	ef 93       	push	r30
    2250:	ff 93       	push	r31
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvoidINT0NotifiFunction != NULL)
    225a:	80 91 84 00 	lds	r24, 0x0084
    225e:	90 91 85 00 	lds	r25, 0x0085
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	29 f0       	breq	.+10     	; 0x2270 <__vector_1+0x40>
	{
		/*Invoke The Global Pointer To Function*/
		EXTI_pvoidINT0NotifiFunction();
    2266:	e0 91 84 00 	lds	r30, 0x0084
    226a:	f0 91 85 00 	lds	r31, 0x0085
    226e:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	ff 91       	pop	r31
    2276:	ef 91       	pop	r30
    2278:	bf 91       	pop	r27
    227a:	af 91       	pop	r26
    227c:	9f 91       	pop	r25
    227e:	8f 91       	pop	r24
    2280:	7f 91       	pop	r23
    2282:	6f 91       	pop	r22
    2284:	5f 91       	pop	r21
    2286:	4f 91       	pop	r20
    2288:	3f 91       	pop	r19
    228a:	2f 91       	pop	r18
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8Direction)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <DIO_voidSetPinDirection+0x6>
    229c:	00 d0       	rcall	.+0      	; 0x229e <DIO_voidSetPinDirection+0x8>
    229e:	0f 92       	push	r0
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	6a 83       	std	Y+2, r22	; 0x02
    22a8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3d 83       	std	Y+5, r19	; 0x05
    22b2:	2c 83       	std	Y+4, r18	; 0x04
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <DIO_voidSetPinDirection+0x2a>
    22be:	47 c0       	rjmp	.+142    	; 0x234e <DIO_voidSetPinDirection+0xb8>
    22c0:	2c 81       	ldd	r18, Y+4	; 0x04
    22c2:	3d 81       	ldd	r19, Y+5	; 0x05
    22c4:	22 30       	cpi	r18, 0x02	; 2
    22c6:	31 05       	cpc	r19, r1
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <DIO_voidSetPinDirection+0x3e>
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
    22cc:	9d 81       	ldd	r25, Y+5	; 0x05
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	71 f0       	breq	.+28     	; 0x22ee <DIO_voidSetPinDirection+0x58>
    22d2:	cb c0       	rjmp	.+406    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	3d 81       	ldd	r19, Y+5	; 0x05
    22d8:	22 30       	cpi	r18, 0x02	; 2
    22da:	31 05       	cpc	r19, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <DIO_voidSetPinDirection+0x4a>
    22de:	67 c0       	rjmp	.+206    	; 0x23ae <DIO_voidSetPinDirection+0x118>
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <DIO_voidSetPinDirection+0x56>
    22ea:	91 c0       	rjmp	.+290    	; 0x240e <DIO_voidSetPinDirection+0x178>
    22ec:	be c0       	rjmp	.+380    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	a1 f4       	brne	.+40     	; 0x231c <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA, Copy_u8PinNumber);
    22f4:	aa e3       	ldi	r26, 0x3A	; 58
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	ea e3       	ldi	r30, 0x3A	; 58
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <DIO_voidSetPinDirection+0x7c>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <DIO_voidSetPinDirection+0x78>
    2316:	84 2b       	or	r24, r20
    2318:	8c 93       	st	X, r24
    231a:	a7 c0       	rjmp	.+334    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	88 23       	and	r24, r24
    2320:	09 f0       	breq	.+2      	; 0x2324 <DIO_voidSetPinDirection+0x8e>
    2322:	a3 c0       	rjmp	.+326    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRA, Copy_u8PinNumber);
    2324:	aa e3       	ldi	r26, 0x3A	; 58
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	ea e3       	ldi	r30, 0x3A	; 58
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <DIO_voidSetPinDirection+0xac>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <DIO_voidSetPinDirection+0xa8>
    2346:	80 95       	com	r24
    2348:	84 23       	and	r24, r20
    234a:	8c 93       	st	X, r24
    234c:	8e c0       	rjmp	.+284    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	a1 f4       	brne	.+40     	; 0x237c <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB, Copy_u8PinNumber);
    2354:	a7 e3       	ldi	r26, 0x37	; 55
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <DIO_voidSetPinDirection+0xdc>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <DIO_voidSetPinDirection+0xd8>
    2376:	84 2b       	or	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	77 c0       	rjmp	.+238    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	88 23       	and	r24, r24
    2380:	09 f0       	breq	.+2      	; 0x2384 <DIO_voidSetPinDirection+0xee>
    2382:	73 c0       	rjmp	.+230    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRB, Copy_u8PinNumber);
    2384:	a7 e3       	ldi	r26, 0x37	; 55
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e7 e3       	ldi	r30, 0x37	; 55
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 2e       	mov	r0, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <DIO_voidSetPinDirection+0x10c>
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <DIO_voidSetPinDirection+0x108>
    23a6:	80 95       	com	r24
    23a8:	84 23       	and	r24, r20
    23aa:	8c 93       	st	X, r24
    23ac:	5e c0       	rjmp	.+188    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	a1 f4       	brne	.+40     	; 0x23dc <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC, Copy_u8PinNumber);
    23b4:	a4 e3       	ldi	r26, 0x34	; 52
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e4 e3       	ldi	r30, 0x34	; 52
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_voidSetPinDirection+0x13c>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <DIO_voidSetPinDirection+0x138>
    23d6:	84 2b       	or	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	47 c0       	rjmp	.+142    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	88 23       	and	r24, r24
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <DIO_voidSetPinDirection+0x14e>
    23e2:	43 c0       	rjmp	.+134    	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRC, Copy_u8PinNumber);
    23e4:	a4 e3       	ldi	r26, 0x34	; 52
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e4 e3       	ldi	r30, 0x34	; 52
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <DIO_voidSetPinDirection+0x16c>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <DIO_voidSetPinDirection+0x168>
    2406:	80 95       	com	r24
    2408:	84 23       	and	r24, r20
    240a:	8c 93       	st	X, r24
    240c:	2e c0       	rjmp	.+92     	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	81 30       	cpi	r24, 0x01	; 1
    2412:	a1 f4       	brne	.+40     	; 0x243c <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD, Copy_u8PinNumber);
    2414:	a1 e3       	ldi	r26, 0x31	; 49
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e1 e3       	ldi	r30, 0x31	; 49
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	48 2f       	mov	r20, r24
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 2e       	mov	r0, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_voidSetPinDirection+0x19c>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	0a 94       	dec	r0
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_voidSetPinDirection+0x198>
    2436:	84 2b       	or	r24, r20
    2438:	8c 93       	st	X, r24
    243a:	17 c0       	rjmp	.+46     	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 23       	and	r24, r24
    2440:	a1 f4       	brne	.+40     	; 0x246a <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRD, Copy_u8PinNumber);
    2442:	a1 e3       	ldi	r26, 0x31	; 49
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e1 e3       	ldi	r30, 0x31	; 49
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <DIO_voidSetPinDirection+0x1ca>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <DIO_voidSetPinDirection+0x1c6>
    2464:	80 95       	com	r24
    2466:	84 23       	and	r24, r20
    2468:	8c 93       	st	X, r24
		break;
		default:
			// Do Nothing
		break;
	}
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	2d 97       	sbiw	r28, 0x0d	; 13
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6a 83       	std	Y+2, r22	; 0x02
    2492:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	3d 87       	std	Y+13, r19	; 0x0d
    249c:	2c 87       	std	Y+12, r18	; 0x0c
    249e:	8c 85       	ldd	r24, Y+12	; 0x0c
    24a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	91 05       	cpc	r25, r1
    24a6:	09 f4       	brne	.+2      	; 0x24aa <DIO_voidSetPinValue+0x30>
    24a8:	4f c0       	rjmp	.+158    	; 0x2548 <DIO_voidSetPinValue+0xce>
    24aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    24ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	2c f4       	brge	.+10     	; 0x24be <DIO_voidSetPinValue+0x44>
    24b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	71 f0       	breq	.+28     	; 0x24d8 <DIO_voidSetPinValue+0x5e>
    24bc:	ec c0       	rjmp	.+472    	; 0x2696 <DIO_voidSetPinValue+0x21c>
    24be:	2c 85       	ldd	r18, Y+12	; 0x0c
    24c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    24c2:	22 30       	cpi	r18, 0x02	; 2
    24c4:	31 05       	cpc	r19, r1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <DIO_voidSetPinValue+0x50>
    24c8:	77 c0       	rjmp	.+238    	; 0x25b8 <DIO_voidSetPinValue+0x13e>
    24ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    24cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ce:	83 30       	cpi	r24, 0x03	; 3
    24d0:	91 05       	cpc	r25, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <DIO_voidSetPinValue+0x5c>
    24d4:	a9 c0       	rjmp	.+338    	; 0x2628 <DIO_voidSetPinValue+0x1ae>
    24d6:	df c0       	rjmp	.+446    	; 0x2696 <DIO_voidSetPinValue+0x21c>
	{
		case DIO_PORTA:
			switch(Copy_u8PinState)
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	3b 87       	std	Y+11, r19	; 0x0b
    24e0:	2a 87       	std	Y+10, r18	; 0x0a
    24e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <DIO_voidSetPinValue+0x7c>
    24ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    24ee:	21 30       	cpi	r18, 0x01	; 1
    24f0:	31 05       	cpc	r19, r1
    24f2:	b1 f0       	breq	.+44     	; 0x2520 <DIO_voidSetPinValue+0xa6>
    24f4:	d0 c0       	rjmp	.+416    	; 0x2696 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTA, Copy_u8PinNumber);
    24f6:	ab e3       	ldi	r26, 0x3B	; 59
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	eb e3       	ldi	r30, 0x3B	; 59
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	48 2f       	mov	r20, r24
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	02 2e       	mov	r0, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <DIO_voidSetPinValue+0x9a>
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	0a 94       	dec	r0
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <DIO_voidSetPinValue+0x96>
    2518:	80 95       	com	r24
    251a:	84 23       	and	r24, r20
    251c:	8c 93       	st	X, r24
    251e:	bb c0       	rjmp	.+374    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTA, Copy_u8PinNumber);
    2520:	ab e3       	ldi	r26, 0x3B	; 59
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	eb e3       	ldi	r30, 0x3B	; 59
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	48 2f       	mov	r20, r24
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 2e       	mov	r0, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <DIO_voidSetPinValue+0xc4>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	0a 94       	dec	r0
    2540:	e2 f7       	brpl	.-8      	; 0x253a <DIO_voidSetPinValue+0xc0>
    2542:	84 2b       	or	r24, r20
    2544:	8c 93       	st	X, r24
    2546:	a7 c0       	rjmp	.+334    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;
		
		case DIO_PORTB:
			switch(Copy_u8PinState)
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	39 87       	std	Y+9, r19	; 0x09
    2550:	28 87       	std	Y+8, r18	; 0x08
    2552:	88 85       	ldd	r24, Y+8	; 0x08
    2554:	99 85       	ldd	r25, Y+9	; 0x09
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	31 f0       	breq	.+12     	; 0x2566 <DIO_voidSetPinValue+0xec>
    255a:	28 85       	ldd	r18, Y+8	; 0x08
    255c:	39 85       	ldd	r19, Y+9	; 0x09
    255e:	21 30       	cpi	r18, 0x01	; 1
    2560:	31 05       	cpc	r19, r1
    2562:	b1 f0       	breq	.+44     	; 0x2590 <DIO_voidSetPinValue+0x116>
    2564:	98 c0       	rjmp	.+304    	; 0x2696 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTB, Copy_u8PinNumber);
    2566:	a8 e3       	ldi	r26, 0x38	; 56
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e8 e3       	ldi	r30, 0x38	; 56
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_voidSetPinValue+0x10a>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_voidSetPinValue+0x106>
    2588:	80 95       	com	r24
    258a:	84 23       	and	r24, r20
    258c:	8c 93       	st	X, r24
    258e:	83 c0       	rjmp	.+262    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTB, Copy_u8PinNumber);
    2590:	a8 e3       	ldi	r26, 0x38	; 56
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e8 e3       	ldi	r30, 0x38	; 56
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <DIO_voidSetPinValue+0x134>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <DIO_voidSetPinValue+0x130>
    25b2:	84 2b       	or	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	6f c0       	rjmp	.+222    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;

		case DIO_PORTC:
			switch(Copy_u8PinState)
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3f 83       	std	Y+7, r19	; 0x07
    25c0:	2e 83       	std	Y+6, r18	; 0x06
    25c2:	8e 81       	ldd	r24, Y+6	; 0x06
    25c4:	9f 81       	ldd	r25, Y+7	; 0x07
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	31 f0       	breq	.+12     	; 0x25d6 <DIO_voidSetPinValue+0x15c>
    25ca:	2e 81       	ldd	r18, Y+6	; 0x06
    25cc:	3f 81       	ldd	r19, Y+7	; 0x07
    25ce:	21 30       	cpi	r18, 0x01	; 1
    25d0:	31 05       	cpc	r19, r1
    25d2:	b1 f0       	breq	.+44     	; 0x2600 <DIO_voidSetPinValue+0x186>
    25d4:	60 c0       	rjmp	.+192    	; 0x2696 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTC, Copy_u8PinNumber);
    25d6:	a5 e3       	ldi	r26, 0x35	; 53
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e5 e3       	ldi	r30, 0x35	; 53
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 2e       	mov	r0, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_voidSetPinValue+0x17a>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_voidSetPinValue+0x176>
    25f8:	80 95       	com	r24
    25fa:	84 23       	and	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	4b c0       	rjmp	.+150    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTC, Copy_u8PinNumber);
    2600:	a5 e3       	ldi	r26, 0x35	; 53
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e5 e3       	ldi	r30, 0x35	; 53
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	48 2f       	mov	r20, r24
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 2e       	mov	r0, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <DIO_voidSetPinValue+0x1a4>
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <DIO_voidSetPinValue+0x1a0>
    2622:	84 2b       	or	r24, r20
    2624:	8c 93       	st	X, r24
    2626:	37 c0       	rjmp	.+110    	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;

		case DIO_PORTD:
			switch(Copy_u8PinState)
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3d 83       	std	Y+5, r19	; 0x05
    2630:	2c 83       	std	Y+4, r18	; 0x04
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	9d 81       	ldd	r25, Y+5	; 0x05
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	31 f0       	breq	.+12     	; 0x2646 <DIO_voidSetPinValue+0x1cc>
    263a:	2c 81       	ldd	r18, Y+4	; 0x04
    263c:	3d 81       	ldd	r19, Y+5	; 0x05
    263e:	21 30       	cpi	r18, 0x01	; 1
    2640:	31 05       	cpc	r19, r1
    2642:	b1 f0       	breq	.+44     	; 0x2670 <DIO_voidSetPinValue+0x1f6>
    2644:	28 c0       	rjmp	.+80     	; 0x2696 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTD, Copy_u8PinNumber);
    2646:	a2 e3       	ldi	r26, 0x32	; 50
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e2 e3       	ldi	r30, 0x32	; 50
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	48 2f       	mov	r20, r24
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	02 2e       	mov	r0, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <DIO_voidSetPinValue+0x1ea>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	0a 94       	dec	r0
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <DIO_voidSetPinValue+0x1e6>
    2668:	80 95       	com	r24
    266a:	84 23       	and	r24, r20
    266c:	8c 93       	st	X, r24
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTD, Copy_u8PinNumber);
    2670:	a2 e3       	ldi	r26, 0x32	; 50
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e2 e3       	ldi	r30, 0x32	; 50
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	48 2f       	mov	r20, r24
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 2e       	mov	r0, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <DIO_voidSetPinValue+0x214>
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	0a 94       	dec	r0
    2690:	e2 f7       	brpl	.-8      	; 0x268a <DIO_voidSetPinValue+0x210>
    2692:	84 2b       	or	r24, r20
    2694:	8c 93       	st	X, r24
		break;
		default:
			// Do Nothing
		break;
	}
}
    2696:	2d 96       	adiw	r28, 0x0d	; 13
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <DIO_u8GetPinValue+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <DIO_u8GetPinValue+0x8>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue = 0;
    26ba:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	3d 83       	std	Y+5, r19	; 0x05
    26c4:	2c 83       	std	Y+4, r18	; 0x04
    26c6:	4c 81       	ldd	r20, Y+4	; 0x04
    26c8:	5d 81       	ldd	r21, Y+5	; 0x05
    26ca:	41 30       	cpi	r20, 0x01	; 1
    26cc:	51 05       	cpc	r21, r1
    26ce:	41 f1       	breq	.+80     	; 0x2720 <DIO_u8GetPinValue+0x78>
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	9d 81       	ldd	r25, Y+5	; 0x05
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 05       	cpc	r25, r1
    26d8:	34 f4       	brge	.+12     	; 0x26e6 <DIO_u8GetPinValue+0x3e>
    26da:	2c 81       	ldd	r18, Y+4	; 0x04
    26dc:	3d 81       	ldd	r19, Y+5	; 0x05
    26de:	21 15       	cp	r18, r1
    26e0:	31 05       	cpc	r19, r1
    26e2:	61 f0       	breq	.+24     	; 0x26fc <DIO_u8GetPinValue+0x54>
    26e4:	52 c0       	rjmp	.+164    	; 0x278a <DIO_u8GetPinValue+0xe2>
    26e6:	4c 81       	ldd	r20, Y+4	; 0x04
    26e8:	5d 81       	ldd	r21, Y+5	; 0x05
    26ea:	42 30       	cpi	r20, 0x02	; 2
    26ec:	51 05       	cpc	r21, r1
    26ee:	51 f1       	breq	.+84     	; 0x2744 <DIO_u8GetPinValue+0x9c>
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	9d 81       	ldd	r25, Y+5	; 0x05
    26f4:	83 30       	cpi	r24, 0x03	; 3
    26f6:	91 05       	cpc	r25, r1
    26f8:	b9 f1       	breq	.+110    	; 0x2768 <DIO_u8GetPinValue+0xc0>
    26fa:	47 c0       	rjmp	.+142    	; 0x278a <DIO_u8GetPinValue+0xe2>
	{
		case DIO_PORTA:
			Local_u8PinValue = GET_BIT(PINA, Copy_u8PinNumber);
    26fc:	e9 e3       	ldi	r30, 0x39	; 57
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a9 01       	movw	r20, r18
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <DIO_u8GetPinValue+0x6c>
    2710:	55 95       	asr	r21
    2712:	47 95       	ror	r20
    2714:	8a 95       	dec	r24
    2716:	e2 f7       	brpl	.-8      	; 0x2710 <DIO_u8GetPinValue+0x68>
    2718:	ca 01       	movw	r24, r20
    271a:	81 70       	andi	r24, 0x01	; 1
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	35 c0       	rjmp	.+106    	; 0x278a <DIO_u8GetPinValue+0xe2>
		break;
		
		case DIO_PORTB:
			Local_u8PinValue = GET_BIT(PINB, Copy_u8PinNumber);
    2720:	e6 e3       	ldi	r30, 0x36	; 54
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a9 01       	movw	r20, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <DIO_u8GetPinValue+0x90>
    2734:	55 95       	asr	r21
    2736:	47 95       	ror	r20
    2738:	8a 95       	dec	r24
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <DIO_u8GetPinValue+0x8c>
    273c:	ca 01       	movw	r24, r20
    273e:	81 70       	andi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	23 c0       	rjmp	.+70     	; 0x278a <DIO_u8GetPinValue+0xe2>
		break;
		
		case DIO_PORTC:
			Local_u8PinValue = GET_BIT(PINC, Copy_u8PinNumber);
    2744:	e3 e3       	ldi	r30, 0x33	; 51
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a9 01       	movw	r20, r18
    2756:	02 c0       	rjmp	.+4      	; 0x275c <DIO_u8GetPinValue+0xb4>
    2758:	55 95       	asr	r21
    275a:	47 95       	ror	r20
    275c:	8a 95       	dec	r24
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <DIO_u8GetPinValue+0xb0>
    2760:	ca 01       	movw	r24, r20
    2762:	81 70       	andi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	11 c0       	rjmp	.+34     	; 0x278a <DIO_u8GetPinValue+0xe2>
		break;

		case DIO_PORTD:
			Local_u8PinValue = GET_BIT(PIND, Copy_u8PinNumber);
    2768:	e0 e3       	ldi	r30, 0x30	; 48
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a9 01       	movw	r20, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <DIO_u8GetPinValue+0xd8>
    277c:	55 95       	asr	r21
    277e:	47 95       	ror	r20
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <DIO_u8GetPinValue+0xd4>
    2784:	ca 01       	movw	r24, r20
    2786:	81 70       	andi	r24, 0x01	; 1
    2788:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:
			/* Do Nothing*/
		break;
	}
	return Local_u8PinValue;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection(u8 Copy_u8PortName, u8 Copy_u8SpecificDirection)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <DIO_voidSetPortSpecificDirection+0x6>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <DIO_voidSetPortSpecificDirection+0x8>
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3c 83       	std	Y+4, r19	; 0x04
    27b4:	2b 83       	std	Y+3, r18	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	d1 f0       	breq	.+52     	; 0x27f4 <DIO_voidSetPortSpecificDirection+0x58>
    27c0:	2b 81       	ldd	r18, Y+3	; 0x03
    27c2:	3c 81       	ldd	r19, Y+4	; 0x04
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <DIO_voidSetPortSpecificDirection+0x38>
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	61 f0       	breq	.+24     	; 0x27ea <DIO_voidSetPortSpecificDirection+0x4e>
    27d2:	1e c0       	rjmp	.+60     	; 0x2810 <DIO_voidSetPortSpecificDirection+0x74>
    27d4:	2b 81       	ldd	r18, Y+3	; 0x03
    27d6:	3c 81       	ldd	r19, Y+4	; 0x04
    27d8:	22 30       	cpi	r18, 0x02	; 2
    27da:	31 05       	cpc	r19, r1
    27dc:	81 f0       	breq	.+32     	; 0x27fe <DIO_voidSetPortSpecificDirection+0x62>
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	83 30       	cpi	r24, 0x03	; 3
    27e4:	91 05       	cpc	r25, r1
    27e6:	81 f0       	breq	.+32     	; 0x2808 <DIO_voidSetPortSpecificDirection+0x6c>
    27e8:	13 c0       	rjmp	.+38     	; 0x2810 <DIO_voidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA:
			// DDRA = Copy_u8SpecificDirection;
			SET_REG(DDRA, Copy_u8SpecificDirection);
    27ea:	ea e3       	ldi	r30, 0x3A	; 58
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	80 83       	st	Z, r24
    27f2:	0e c0       	rjmp	.+28     	; 0x2810 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB:
			SET_REG(DDRB, Copy_u8SpecificDirection);
    27f4:	e7 e3       	ldi	r30, 0x37	; 55
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	80 83       	st	Z, r24
    27fc:	09 c0       	rjmp	.+18     	; 0x2810 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC:
			SET_REG(DDRC, Copy_u8SpecificDirection);
    27fe:	e4 e3       	ldi	r30, 0x34	; 52
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	80 83       	st	Z, r24
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD:
			SET_REG(DDRD, Copy_u8SpecificDirection);
    2808:	e1 e3       	ldi	r30, 0x31	; 49
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	80 83       	st	Z, r24
		break;
		default:
			/* Do Nothing*/
		break;
	}
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <DIO_voidSetPortSpecificValue>:
void DIO_voidSetPortSpecificValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <DIO_voidSetPortSpecificValue+0x6>
    2824:	00 d0       	rcall	.+0      	; 0x2826 <DIO_voidSetPortSpecificValue+0x8>
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	3c 83       	std	Y+4, r19	; 0x04
    2836:	2b 83       	std	Y+3, r18	; 0x03
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	91 05       	cpc	r25, r1
    2840:	d1 f0       	breq	.+52     	; 0x2876 <DIO_voidSetPortSpecificValue+0x58>
    2842:	2b 81       	ldd	r18, Y+3	; 0x03
    2844:	3c 81       	ldd	r19, Y+4	; 0x04
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	31 05       	cpc	r19, r1
    284a:	2c f4       	brge	.+10     	; 0x2856 <DIO_voidSetPortSpecificValue+0x38>
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	61 f0       	breq	.+24     	; 0x286c <DIO_voidSetPortSpecificValue+0x4e>
    2854:	1e c0       	rjmp	.+60     	; 0x2892 <DIO_voidSetPortSpecificValue+0x74>
    2856:	2b 81       	ldd	r18, Y+3	; 0x03
    2858:	3c 81       	ldd	r19, Y+4	; 0x04
    285a:	22 30       	cpi	r18, 0x02	; 2
    285c:	31 05       	cpc	r19, r1
    285e:	81 f0       	breq	.+32     	; 0x2880 <DIO_voidSetPortSpecificValue+0x62>
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	83 30       	cpi	r24, 0x03	; 3
    2866:	91 05       	cpc	r25, r1
    2868:	81 f0       	breq	.+32     	; 0x288a <DIO_voidSetPortSpecificValue+0x6c>
    286a:	13 c0       	rjmp	.+38     	; 0x2892 <DIO_voidSetPortSpecificValue+0x74>
	{
		case DIO_PORTA:
			// PORTA = Copy_u8PortValue;
			SET_REG(PORTA, Copy_u8PortValue);
    286c:	eb e3       	ldi	r30, 0x3B	; 59
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	80 83       	st	Z, r24
    2874:	0e c0       	rjmp	.+28     	; 0x2892 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTB:
			SET_REG(PORTB, Copy_u8PortValue);		
    2876:	e8 e3       	ldi	r30, 0x38	; 56
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	80 83       	st	Z, r24
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTC:
			SET_REG(PORTC, Copy_u8PortValue);
    2880:	e5 e3       	ldi	r30, 0x35	; 53
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	80 83       	st	Z, r24
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTD:
			SET_REG(PORTD, Copy_u8PortValue);
    288a:	e2 e3       	ldi	r30, 0x32	; 50
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	80 83       	st	Z, r24
		break;
	}
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <LED_voidInit>:
#include "LED_private.h"
#include "LED_config.h"


void LED_voidInit(LED_t* Ledobj)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <LED_voidInit+0x6>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Ledobj->LED_PORT , Ledobj->LED_PIN , OUTPUT);
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	80 81       	ld	r24, Z
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	69 2f       	mov	r22, r25
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
}
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <LED_voidTurnOn>:
void LED_voidTurnOn(LED_t* Ledobj)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <LED_voidTurnOn+0x6>
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(Ledobj->LED_PORT , Ledobj->LED_PIN , HIGH);
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	80 81       	ld	r24, Z
    28e0:	e9 81       	ldd	r30, Y+1	; 0x01
    28e2:	fa 81       	ldd	r31, Y+2	; 0x02
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	69 2f       	mov	r22, r25
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LED_voidTurnOff>:
void LED_voidTurnOff(LED_t* Ledobj)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <LED_voidTurnOff+0x6>
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(Ledobj->LED_PORT , Ledobj->LED_PIN , LOW);
    2906:	e9 81       	ldd	r30, Y+1	; 0x01
    2908:	fa 81       	ldd	r31, Y+2	; 0x02
    290a:	80 81       	ld	r24, Z
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	69 2f       	mov	r22, r25
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <LCD_vidInit>:
#include "../../MCAL/DIO/DIO_interface.h"

#include "LCD_interface.h"
#include "util/delay.h"

void LCD_vidInit(void){
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	c4 55       	subi	r28, 0x54	; 84
    2932:	d0 40       	sbci	r29, 0x00	; 0
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	62 e0       	ldi	r22, 0x02	; 2
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPortSpecificDirection(lcd_DATAPORT,0xff);
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	6f ef       	ldi	r22, 0xFF	; 255
    294c:	0e 94 ce 13 	call	0x279c	; 0x279c <DIO_voidSetPortSpecificDirection>

	DIO_voidSetPinDirection(lcd_CONTROLPORT,lcd_RSPIN,OUTPUT);
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(lcd_CONTROLPORT,lcd_RWPIN,OUTPUT);
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(lcd_CONTROLPORT,lcd_EPIN,OUTPUT);
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    296e:	fe 01       	movw	r30, r28
    2970:	ef 5a       	subi	r30, 0xAF	; 175
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 ef       	ldi	r26, 0xF0	; 240
    297a:	b1 e4       	ldi	r27, 0x41	; 65
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	8e 01       	movw	r16, r28
    2986:	03 5b       	subi	r16, 0xB3	; 179
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	ef 5a       	subi	r30, 0xAF	; 175
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a ef       	ldi	r20, 0xFA	; 250
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	f8 01       	movw	r30, r16
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	a2 83       	std	Z+2, r26	; 0x02
    29b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b2:	fe 01       	movw	r30, r28
    29b4:	e3 5b       	subi	r30, 0xB3	; 179
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	44 f4       	brge	.+16     	; 0x29e0 <LCD_vidInit+0xbc>
		__ticks = 1;
    29d0:	fe 01       	movw	r30, r28
    29d2:	e5 5b       	subi	r30, 0xB5	; 181
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	64 c0       	rjmp	.+200    	; 0x2aa8 <LCD_vidInit+0x184>
	else if (__tmp > 65535)
    29e0:	fe 01       	movw	r30, r28
    29e2:	e3 5b       	subi	r30, 0xB3	; 179
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	0c f0       	brlt	.+2      	; 0x2a00 <LCD_vidInit+0xdc>
    29fe:	43 c0       	rjmp	.+134    	; 0x2a86 <LCD_vidInit+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	fe 01       	movw	r30, r28
    2a02:	ef 5a       	subi	r30, 0xAF	; 175
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8e 01       	movw	r16, r28
    2a20:	05 5b       	subi	r16, 0xB5	; 181
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	f8 01       	movw	r30, r16
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	1f c0       	rjmp	.+62     	; 0x2a76 <LCD_vidInit+0x152>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e7 5b       	subi	r30, 0xB7	; 183
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a46:	fe 01       	movw	r30, r28
    2a48:	e7 5b       	subi	r30, 0xB7	; 183
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_vidInit+0x12c>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 5b       	subi	r30, 0xB7	; 183
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	de 01       	movw	r26, r28
    2a60:	a5 5b       	subi	r26, 0xB5	; 181
    2a62:	bf 4f       	sbci	r27, 0xFF	; 255
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 5b       	subi	r30, 0xB5	; 181
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	9c 93       	st	X, r25
    2a74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e5 5b       	subi	r30, 0xB5	; 181
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	d1 f6       	brne	.-76     	; 0x2a38 <LCD_vidInit+0x114>
    2a84:	27 c0       	rjmp	.+78     	; 0x2ad4 <LCD_vidInit+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	8e 01       	movw	r16, r28
    2a88:	05 5b       	subi	r16, 0xB5	; 181
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e3 5b       	subi	r30, 0xB3	; 179
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	de 01       	movw	r26, r28
    2aaa:	a9 5b       	subi	r26, 0xB9	; 185
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e5 5b       	subi	r30, 0xB5	; 181
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	8d 93       	st	X+, r24
    2aba:	9c 93       	st	X, r25
    2abc:	fe 01       	movw	r30, r28
    2abe:	e9 5b       	subi	r30, 0xB9	; 185
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_vidInit+0x1a2>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e9 5b       	subi	r30, 0xB9	; 185
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24

	_delay_ms(30);

	LCD_vidSendCommand(lcd_Home);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    2ada:	fe 01       	movw	r30, r28
    2adc:	ed 5b       	subi	r30, 0xBD	; 189
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae6:	b0 e4       	ldi	r27, 0x40	; 64
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	8e 01       	movw	r16, r28
    2af2:	01 5c       	subi	r16, 0xC1	; 193
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	ed 5b       	subi	r30, 0xBD	; 189
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ff 96       	adiw	r30, 0x3f	; 63
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <LCD_vidInit+0x220>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e af       	std	Y+62, r25	; 0x3e
    2b40:	8d af       	std	Y+61, r24	; 0x3d
    2b42:	46 c0       	rjmp	.+140    	; 0x2bd0 <LCD_vidInit+0x2ac>
	else if (__tmp > 65535)
    2b44:	fe 01       	movw	r30, r28
    2b46:	ff 96       	adiw	r30, 0x3f	; 63
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	64 f5       	brge	.+88     	; 0x2bb8 <LCD_vidInit+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e af       	std	Y+62, r25	; 0x3e
    2b8c:	8d af       	std	Y+61, r24	; 0x3d
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <LCD_vidInit+0x28a>
    2b90:	88 ec       	ldi	r24, 0xC8	; 200
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c af       	std	Y+60, r25	; 0x3c
    2b96:	8b af       	std	Y+59, r24	; 0x3b
    2b98:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_vidInit+0x278>
    2ba0:	9c af       	std	Y+60, r25	; 0x3c
    2ba2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e af       	std	Y+62, r25	; 0x3e
    2bac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <LCD_vidInit+0x26c>
    2bb6:	16 c0       	rjmp	.+44     	; 0x2be4 <LCD_vidInit+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ff 96       	adiw	r30, 0x3f	; 63
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9e af       	std	Y+62, r25	; 0x3e
    2bce:	8d af       	std	Y+61, r24	; 0x3d
    2bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd4:	9a af       	std	Y+58, r25	; 0x3a
    2bd6:	89 af       	std	Y+57, r24	; 0x39
    2bd8:	89 ad       	ldd	r24, Y+57	; 0x39
    2bda:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <LCD_vidInit+0x2b8>
    2be0:	9a af       	std	Y+58, r25	; 0x3a
    2be2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);

	LCD_vidSendCommand(lcd_FunctionSet8bit);
    2be4:	88 e3       	ldi	r24, 0x38	; 56
    2be6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 ea       	ldi	r26, 0xA0	; 160
    2bf0:	b0 e4       	ldi	r27, 0x40	; 64
    2bf2:	8d ab       	std	Y+53, r24	; 0x35
    2bf4:	9e ab       	std	Y+54, r25	; 0x36
    2bf6:	af ab       	std	Y+55, r26	; 0x37
    2bf8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6d a9       	ldd	r22, Y+53	; 0x35
    2bfc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bfe:	8f a9       	ldd	r24, Y+55	; 0x37
    2c00:	98 ad       	ldd	r25, Y+56	; 0x38
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	89 ab       	std	Y+49, r24	; 0x31
    2c14:	9a ab       	std	Y+50, r25	; 0x32
    2c16:	ab ab       	std	Y+51, r26	; 0x33
    2c18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c20:	9c a9       	ldd	r25, Y+52	; 0x34
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <LCD_vidInit+0x318>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	98 ab       	std	Y+48, r25	; 0x30
    2c38:	8f a7       	std	Y+47, r24	; 0x2f
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <LCD_vidInit+0x396>
	else if (__tmp > 65535)
    2c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c40:	8b a9       	ldd	r24, Y+51	; 0x33
    2c42:	9c a9       	ldd	r25, Y+52	; 0x34
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <LCD_vidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6d a9       	ldd	r22, Y+53	; 0x35
    2c56:	7e a9       	ldd	r23, Y+54	; 0x36
    2c58:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	98 ab       	std	Y+48, r25	; 0x30
    2c7a:	8f a7       	std	Y+47, r24	; 0x2f
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <LCD_vidInit+0x378>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e a7       	std	Y+46, r25	; 0x2e
    2c84:	8d a7       	std	Y+45, r24	; 0x2d
    2c86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_vidInit+0x366>
    2c8e:	9e a7       	std	Y+46, r25	; 0x2e
    2c90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	98 ab       	std	Y+48, r25	; 0x30
    2c9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <LCD_vidInit+0x35a>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <LCD_vidInit+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    2caa:	8b a9       	ldd	r24, Y+51	; 0x33
    2cac:	9c a9       	ldd	r25, Y+52	; 0x34
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	98 ab       	std	Y+48, r25	; 0x30
    2cb8:	8f a7       	std	Y+47, r24	; 0x2f
    2cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cbe:	9c a7       	std	Y+44, r25	; 0x2c
    2cc0:	8b a7       	std	Y+43, r24	; 0x2b
    2cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCD_vidInit+0x3a2>
    2cca:	9c a7       	std	Y+44, r25	; 0x2c
    2ccc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	LCD_vidSendCommand(lcd_DisplayOn);
    2cce:	8c e0       	ldi	r24, 0x0C	; 12
    2cd0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 ea       	ldi	r26, 0xA0	; 160
    2cda:	b0 e4       	ldi	r27, 0x40	; 64
    2cdc:	8f a3       	std	Y+39, r24	; 0x27
    2cde:	98 a7       	std	Y+40, r25	; 0x28
    2ce0:	a9 a7       	std	Y+41, r26	; 0x29
    2ce2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ce8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8b a3       	std	Y+35, r24	; 0x23
    2cfe:	9c a3       	std	Y+36, r25	; 0x24
    2d00:	ad a3       	std	Y+37, r26	; 0x25
    2d02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d04:	6b a1       	ldd	r22, Y+35	; 0x23
    2d06:	7c a1       	ldd	r23, Y+36	; 0x24
    2d08:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <LCD_vidInit+0x402>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9a a3       	std	Y+34, r25	; 0x22
    2d22:	89 a3       	std	Y+33, r24	; 0x21
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <LCD_vidInit+0x480>
	else if (__tmp > 65535)
    2d26:	6b a1       	ldd	r22, Y+35	; 0x23
    2d28:	7c a1       	ldd	r23, Y+36	; 0x24
    2d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <LCD_vidInit+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d40:	78 a5       	ldd	r23, Y+40	; 0x28
    2d42:	89 a5       	ldd	r24, Y+41	; 0x29
    2d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9a a3       	std	Y+34, r25	; 0x22
    2d64:	89 a3       	std	Y+33, r24	; 0x21
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <LCD_vidInit+0x462>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	98 a3       	std	Y+32, r25	; 0x20
    2d6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d72:	98 a1       	ldd	r25, Y+32	; 0x20
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <LCD_vidInit+0x450>
    2d78:	98 a3       	std	Y+32, r25	; 0x20
    2d7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <LCD_vidInit+0x444>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <LCD_vidInit+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6b a1       	ldd	r22, Y+35	; 0x23
    2d92:	7c a1       	ldd	r23, Y+36	; 0x24
    2d94:	8d a1       	ldd	r24, Y+37	; 0x25
    2d96:	9e a1       	ldd	r25, Y+38	; 0x26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9a a3       	std	Y+34, r25	; 0x22
    2da2:	89 a3       	std	Y+33, r24	; 0x21
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	9e 8f       	std	Y+30, r25	; 0x1e
    2daa:	8d 8f       	std	Y+29, r24	; 0x1d
    2dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_vidInit+0x48c>
    2db4:	9e 8f       	std	Y+30, r25	; 0x1e
    2db6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	LCD_vidSendCommand(lcd_Clear);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 ea       	ldi	r26, 0xA0	; 160
    2dc4:	b0 e4       	ldi	r27, 0x40	; 64
    2dc6:	89 8f       	std	Y+25, r24	; 0x19
    2dc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dca:	ab 8f       	std	Y+27, r26	; 0x1b
    2dcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a ef       	ldi	r20, 0xFA	; 250
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8d 8b       	std	Y+21, r24	; 0x15
    2de8:	9e 8b       	std	Y+22, r25	; 0x16
    2dea:	af 8b       	std	Y+23, r26	; 0x17
    2dec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dee:	6d 89       	ldd	r22, Y+21	; 0x15
    2df0:	7e 89       	ldd	r23, Y+22	; 0x16
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	98 8d       	ldd	r25, Y+24	; 0x18
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	2c f4       	brge	.+10     	; 0x2e10 <LCD_vidInit+0x4ec>
		__ticks = 1;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9c 8b       	std	Y+20, r25	; 0x14
    2e0c:	8b 8b       	std	Y+19, r24	; 0x13
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <LCD_vidInit+0x56a>
	else if (__tmp > 65535)
    2e10:	6d 89       	ldd	r22, Y+21	; 0x15
    2e12:	7e 89       	ldd	r23, Y+22	; 0x16
    2e14:	8f 89       	ldd	r24, Y+23	; 0x17
    2e16:	98 8d       	ldd	r25, Y+24	; 0x18
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	4c f5       	brge	.+82     	; 0x2e7a <LCD_vidInit+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9c 8b       	std	Y+20, r25	; 0x14
    2e4e:	8b 8b       	std	Y+19, r24	; 0x13
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_vidInit+0x54c>
    2e52:	88 ec       	ldi	r24, 0xC8	; 200
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	9a 8b       	std	Y+18, r25	; 0x12
    2e58:	89 8b       	std	Y+17, r24	; 0x11
    2e5a:	89 89       	ldd	r24, Y+17	; 0x11
    2e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_vidInit+0x53a>
    2e62:	9a 8b       	std	Y+18, r25	; 0x12
    2e64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9c 8b       	std	Y+20, r25	; 0x14
    2e6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	8b 89       	ldd	r24, Y+19	; 0x13
    2e72:	9c 89       	ldd	r25, Y+20	; 0x14
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_vidInit+0x52e>
    2e78:	14 c0       	rjmp	.+40     	; 0x2ea2 <LCD_vidInit+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e80:	98 8d       	ldd	r25, Y+24	; 0x18
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9c 8b       	std	Y+20, r25	; 0x14
    2e8c:	8b 8b       	std	Y+19, r24	; 0x13
    2e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e90:	9c 89       	ldd	r25, Y+20	; 0x14
    2e92:	98 8b       	std	Y+16, r25	; 0x10
    2e94:	8f 87       	std	Y+15, r24	; 0x0f
    2e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e98:	98 89       	ldd	r25, Y+16	; 0x10
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <LCD_vidInit+0x576>
    2e9e:	98 8b       	std	Y+16, r25	; 0x10
    2ea0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	LCD_vidSendCommand(lcd_EntryMode);
    2ea2:	86 e0       	ldi	r24, 0x06	; 6
    2ea4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	a0 ea       	ldi	r26, 0xA0	; 160
    2eae:	b0 e4       	ldi	r27, 0x40	; 64
    2eb0:	8b 87       	std	Y+11, r24	; 0x0b
    2eb2:	9c 87       	std	Y+12, r25	; 0x0c
    2eb4:	ad 87       	std	Y+13, r26	; 0x0d
    2eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	4a ef       	ldi	r20, 0xFA	; 250
    2ec6:	54 e4       	ldi	r21, 0x44	; 68
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	8f 83       	std	Y+7, r24	; 0x07
    2ed2:	98 87       	std	Y+8, r25	; 0x08
    2ed4:	a9 87       	std	Y+9, r26	; 0x09
    2ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e8       	ldi	r20, 0x80	; 128
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eec:	88 23       	and	r24, r24
    2eee:	2c f4       	brge	.+10     	; 0x2efa <LCD_vidInit+0x5d6>
		__ticks = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	3f c0       	rjmp	.+126    	; 0x2f78 <LCD_vidInit+0x654>
	else if (__tmp > 65535)
    2efa:	6f 81       	ldd	r22, Y+7	; 0x07
    2efc:	78 85       	ldd	r23, Y+8	; 0x08
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	3f ef       	ldi	r19, 0xFF	; 255
    2f06:	4f e7       	ldi	r20, 0x7F	; 127
    2f08:	57 e4       	ldi	r21, 0x47	; 71
    2f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f0e:	18 16       	cp	r1, r24
    2f10:	4c f5       	brge	.+82     	; 0x2f64 <LCD_vidInit+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e2       	ldi	r20, 0x20	; 32
    2f20:	51 e4       	ldi	r21, 0x41	; 65
    2f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
    2f3a:	0f c0       	rjmp	.+30     	; 0x2f5a <LCD_vidInit+0x636>
    2f3c:	88 ec       	ldi	r24, 0xC8	; 200
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	9c 81       	ldd	r25, Y+4	; 0x04
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_vidInit+0x624>
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	69 f7       	brne	.-38     	; 0x2f3c <LCD_vidInit+0x618>
    2f62:	14 c0       	rjmp	.+40     	; 0x2f8c <LCD_vidInit+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	6f 81       	ldd	r22, Y+7	; 0x07
    2f66:	78 85       	ldd	r23, Y+8	; 0x08
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9e 83       	std	Y+6, r25	; 0x06
    2f76:	8d 83       	std	Y+5, r24	; 0x05
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_vidInit+0x660>
    2f88:	9a 83       	std	Y+2, r25	; 0x02
    2f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);


}
    2f8c:	cc 5a       	subi	r28, 0xAC	; 172
    2f8e:	df 4f       	sbci	r29, 0xFF	; 255
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	08 95       	ret

00002fa4 <LCD_ClrCmd>:

void LCD_ClrCmd(void){
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCommand(lcd_Clear);
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
}
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <LCD_vidSendCommand>:
void LCD_vidSendCommand(u8 u8CmdCpy){
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	2f 97       	sbiw	r28, 0x0f	; 15
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_RSPIN,LOW);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_RWPIN,LOW);
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	61 e0       	ldi	r22, 0x01	; 1
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	62 e0       	ldi	r22, 0x02	; 2
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPortSpecificValue(lcd_DATAPORT,u8CmdCpy);
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ff0:	0e 94 0f 14 	call	0x281e	; 0x281e <DIO_voidSetPortSpecificValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,HIGH);
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	62 e0       	ldi	r22, 0x02	; 2
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a0 ea       	ldi	r26, 0xA0	; 160
    3004:	b0 e4       	ldi	r27, 0x40	; 64
    3006:	8b 87       	std	Y+11, r24	; 0x0b
    3008:	9c 87       	std	Y+12, r25	; 0x0c
    300a:	ad 87       	std	Y+13, r26	; 0x0d
    300c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3010:	7c 85       	ldd	r23, Y+12	; 0x0c
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	4a ef       	ldi	r20, 0xFA	; 250
    301c:	54 e4       	ldi	r21, 0x44	; 68
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	8f 83       	std	Y+7, r24	; 0x07
    3028:	98 87       	std	Y+8, r25	; 0x08
    302a:	a9 87       	std	Y+9, r26	; 0x09
    302c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302e:	6f 81       	ldd	r22, Y+7	; 0x07
    3030:	78 85       	ldd	r23, Y+8	; 0x08
    3032:	89 85       	ldd	r24, Y+9	; 0x09
    3034:	9a 85       	ldd	r25, Y+10	; 0x0a
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3042:	88 23       	and	r24, r24
    3044:	2c f4       	brge	.+10     	; 0x3050 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	3f c0       	rjmp	.+126    	; 0x30ce <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    3050:	6f 81       	ldd	r22, Y+7	; 0x07
    3052:	78 85       	ldd	r23, Y+8	; 0x08
    3054:	89 85       	ldd	r24, Y+9	; 0x09
    3056:	9a 85       	ldd	r25, Y+10	; 0x0a
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	4f e7       	ldi	r20, 0x7F	; 127
    305e:	57 e4       	ldi	r21, 0x47	; 71
    3060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3064:	18 16       	cp	r1, r24
    3066:	4c f5       	brge	.+82     	; 0x30ba <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3068:	6b 85       	ldd	r22, Y+11	; 0x0b
    306a:	7c 85       	ldd	r23, Y+12	; 0x0c
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e2       	ldi	r20, 0x20	; 32
    3076:	51 e4       	ldi	r21, 0x41	; 65
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <LCD_vidSendCommand+0xf8>
    3092:	88 ec       	ldi	r24, 0xC8	; 200
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9c 83       	std	Y+4, r25	; 0x04
    3098:	8b 83       	std	Y+3, r24	; 0x03
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <LCD_vidSendCommand+0xe6>
    30a2:	9c 83       	std	Y+4, r25	; 0x04
    30a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	9e 81       	ldd	r25, Y+6	; 0x06
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b0:	8d 81       	ldd	r24, Y+5	; 0x05
    30b2:	9e 81       	ldd	r25, Y+6	; 0x06
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	69 f7       	brne	.-38     	; 0x3092 <LCD_vidSendCommand+0xda>
    30b8:	14 c0       	rjmp	.+40     	; 0x30e2 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	9e 83       	std	Y+6, r25	; 0x06
    30cc:	8d 83       	std	Y+5, r24	; 0x05
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	9a 83       	std	Y+2, r25	; 0x02
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	f1 f7       	brne	.-4      	; 0x30da <LCD_vidSendCommand+0x122>
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	62 e0       	ldi	r22, 0x02	; 2
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>

}
    30ec:	2f 96       	adiw	r28, 0x0f	; 15
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy){
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	2f 97       	sbiw	r28, 0x0f	; 15
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_RSPIN,HIGH);
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_RWPIN,LOW);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	62 e0       	ldi	r22, 0x02	; 2
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPortSpecificValue(lcd_DATAPORT,u8DataCpy);
    3132:	83 e0       	ldi	r24, 0x03	; 3
    3134:	6f 85       	ldd	r22, Y+15	; 0x0f
    3136:	0e 94 0f 14 	call	0x281e	; 0x281e <DIO_voidSetPortSpecificValue>
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,HIGH);
    313a:	82 e0       	ldi	r24, 0x02	; 2
    313c:	62 e0       	ldi	r22, 0x02	; 2
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a0 ea       	ldi	r26, 0xA0	; 160
    314a:	b0 e4       	ldi	r27, 0x40	; 64
    314c:	8b 87       	std	Y+11, r24	; 0x0b
    314e:	9c 87       	std	Y+12, r25	; 0x0c
    3150:	ad 87       	std	Y+13, r26	; 0x0d
    3152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3154:	6b 85       	ldd	r22, Y+11	; 0x0b
    3156:	7c 85       	ldd	r23, Y+12	; 0x0c
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a ef       	ldi	r20, 0xFA	; 250
    3162:	54 e4       	ldi	r21, 0x44	; 68
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8f 83       	std	Y+7, r24	; 0x07
    316e:	98 87       	std	Y+8, r25	; 0x08
    3170:	a9 87       	std	Y+9, r26	; 0x09
    3172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	5f e3       	ldi	r21, 0x3F	; 63
    3184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3188:	88 23       	and	r24, r24
    318a:	2c f4       	brge	.+10     	; 0x3196 <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	4f e7       	ldi	r20, 0x7F	; 127
    31a4:	57 e4       	ldi	r21, 0x47	; 71
    31a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31aa:	18 16       	cp	r1, r24
    31ac:	4c f5       	brge	.+82     	; 0x3200 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <LCD_vidWriteCharctr+0xf8>
    31d8:	88 ec       	ldi	r24, 0xC8	; 200
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9c 83       	std	Y+4, r25	; 0x04
    31de:	8b 83       	std	Y+3, r24	; 0x03
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <LCD_vidWriteCharctr+0xe6>
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	69 f7       	brne	.-38     	; 0x31d8 <LCD_vidWriteCharctr+0xda>
    31fe:	14 c0       	rjmp	.+40     	; 0x3228 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <LCD_vidWriteCharctr+0x122>
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
    3228:	82 e0       	ldi	r24, 0x02	; 2
    322a:	62 e0       	ldi	r22, 0x02	; 2
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    3232:	2f 96       	adiw	r28, 0x0f	; 15
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <LCD_vidWriteString>:
void LCD_vidWriteString (u8* pu8StringCpy){
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	00 d0       	rcall	.+0      	; 0x324a <LCD_vidWriteString+0x6>
    324a:	0f 92       	push	r0
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	9b 83       	std	Y+3, r25	; 0x03
    3252:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    3254:	19 82       	std	Y+1, r1	; 0x01
    3256:	0e c0       	rjmp	.+28     	; 0x3274 <LCD_vidWriteString+0x30>
	while(*(pu8StringCpy + i) != '\0'){
		LCD_vidWriteCharctr(*(pu8StringCpy + i));
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	fc 01       	movw	r30, r24
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	80 81       	ld	r24, Z
    326a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_vidWriteCharctr>
		i++;
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	8f 5f       	subi	r24, 0xFF	; 255
    3272:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(lcd_CONTROLPORT,lcd_EPIN,LOW);
}
void LCD_vidWriteString (u8* pu8StringCpy){
	u8 i=0;
	while(*(pu8StringCpy + i) != '\0'){
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	9b 81       	ldd	r25, Y+3	; 0x03
    327e:	fc 01       	movw	r30, r24
    3280:	e2 0f       	add	r30, r18
    3282:	f3 1f       	adc	r31, r19
    3284:	80 81       	ld	r24, Z
    3286:	88 23       	and	r24, r24
    3288:	39 f7       	brne	.-50     	; 0x3258 <LCD_vidWriteString+0x14>
		LCD_vidWriteCharctr(*(pu8StringCpy + i));
		i++;
	}
}
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <Gotoxy>:
void Gotoxy (u8 Y,u8 X){
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <Gotoxy+0x6>
    329c:	00 d0       	rcall	.+0      	; 0x329e <Gotoxy+0x8>
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	6a 83       	std	Y+2, r22	; 0x02
	if (X>=0 && X<=16)
    32a6:	8a 81       	ldd	r24, Y+2	; 0x02
    32a8:	81 31       	cpi	r24, 0x11	; 17
    32aa:	c8 f4       	brcc	.+50     	; 0x32de <Gotoxy+0x48>
	{
		switch(Y)
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	3c 83       	std	Y+4, r19	; 0x04
    32b4:	2b 83       	std	Y+3, r18	; 0x03
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	91 05       	cpc	r25, r1
    32be:	31 f0       	breq	.+12     	; 0x32cc <Gotoxy+0x36>
    32c0:	2b 81       	ldd	r18, Y+3	; 0x03
    32c2:	3c 81       	ldd	r19, Y+4	; 0x04
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	31 f0       	breq	.+12     	; 0x32d6 <Gotoxy+0x40>
    32ca:	09 c0       	rjmp	.+18     	; 0x32de <Gotoxy+0x48>
		{
		case 1:
			LCD_vidSendCommand(X+128);
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	80 58       	subi	r24, 0x80	; 128
    32d0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
    32d4:	04 c0       	rjmp	.+8      	; 0x32de <Gotoxy+0x48>
			break;
		case 2:
			LCD_vidSendCommand(X+192);
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	80 54       	subi	r24, 0x40	; 64
    32da:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <LCD_vidSendCommand>
			break;
		default:
			break;
		}
	}
}
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_vSetCGRamAdd>:

void LCD_vSetCGRamAdd (u8 Y,u8 X)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <LCD_vSetCGRamAdd+0x6>
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	6a 83       	std	Y+2, r22	; 0x02

}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <KPD_voidInit>:




void KPD_voidInit(void)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    /* Set Rows Pins To Be Input PulledUp*/
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, INPUT);
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	60 e0       	ldi	r22, 0x00	; 0
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, INPUT);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	61 e0       	ldi	r22, 0x01	; 1
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, INPUT);
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	62 e0       	ldi	r22, 0x02	; 2
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, INPUT);
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	63 e0       	ldi	r22, 0x03	; 3
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, PULLUP);
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	41 e0       	ldi	r20, 0x01	; 1
    333a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, PULLUP);
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, PULLUP);
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	62 e0       	ldi	r22, 0x02	; 2
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, PULLUP);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	63 e0       	ldi	r22, 0x03	; 3
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>

    /* Set Columns Pins To Be Output High*/
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, OUTPUT);
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	64 e0       	ldi	r22, 0x04	; 4
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, OUTPUT);
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	65 e0       	ldi	r22, 0x05	; 5
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, OUTPUT);
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	66 e0       	ldi	r22, 0x06	; 6
    3374:	41 e0       	ldi	r20, 0x01	; 1
    3376:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, OUTPUT);
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	67 e0       	ldi	r22, 0x07	; 7
    337e:	41 e0       	ldi	r20, 0x01	; 1
    3380:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, HIGH);
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	64 e0       	ldi	r22, 0x04	; 4
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, HIGH);
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	65 e0       	ldi	r22, 0x05	; 5
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, HIGH);
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	66 e0       	ldi	r22, 0x06	; 6
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, HIGH);
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	67 e0       	ldi	r22, 0x07	; 7
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <KPD_u8GetPressedKey+0x6>
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <KPD_u8GetPressedKey+0x8>
    33ba:	0f 92       	push	r0
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8KPDColumnsArray[KPD_COULMNS_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	89 83       	std	Y+1, r24	; 0x01
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    33c4:	1b 82       	std	Y+3, r1	; 0x03
    33c6:	57 c0       	rjmp	.+174    	; 0x3476 <KPD_u8GetPressedKey+0xc4>
    {
        /*Activate A Column , Activate (Ground)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], LOW);
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	88 2f       	mov	r24, r24
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	fc 01       	movw	r30, r24
    33d0:	e4 59       	subi	r30, 0x94	; 148
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	90 81       	ld	r25, Z
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	69 2f       	mov	r22, r25
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
        /*Iterate On The KPD Rows */
        for(Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    33e0:	1a 82       	std	Y+2, r1	; 0x02
    33e2:	37 c0       	rjmp	.+110    	; 0x3452 <KPD_u8GetPressedKey+0xa0>
        {
            /*Get The Row Value*/
            Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	fc 01       	movw	r30, r24
    33ec:	e8 59       	subi	r30, 0x98	; 152
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	90 81       	ld	r25, Z
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	69 2f       	mov	r22, r25
    33f6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_u8GetPinValue>
    33fa:	8c 83       	std	Y+4, r24	; 0x04
            if(Local_u8RowValue == LOW)
    33fc:	8c 81       	ldd	r24, Y+4	; 0x04
    33fe:	88 23       	and	r24, r24
    3400:	29 f5       	brne	.+74     	; 0x344c <KPD_u8GetPressedKey+0x9a>
            {
                /*Get The Pressed Key*/
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	48 2f       	mov	r20, r24
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	ca 01       	movw	r24, r20
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	fc 01       	movw	r30, r24
    341e:	e0 59       	subi	r30, 0x90	; 144
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	0c c0       	rjmp	.+24     	; 0x3440 <KPD_u8GetPressedKey+0x8e>
                /*Polling (busy wait) till the key is released*/
                while(Local_u8RowValue == LOW)
                {
                    Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	fc 01       	movw	r30, r24
    3430:	e8 59       	subi	r30, 0x98	; 152
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	90 81       	ld	r25, Z
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	69 2f       	mov	r22, r25
    343a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_u8GetPinValue>
    343e:	8c 83       	std	Y+4, r24	; 0x04
            if(Local_u8RowValue == LOW)
            {
                /*Get The Pressed Key*/
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
                /*Polling (busy wait) till the key is released*/
                while(Local_u8RowValue == LOW)
    3440:	8c 81       	ldd	r24, Y+4	; 0x04
    3442:	88 23       	and	r24, r24
    3444:	89 f3       	breq	.-30     	; 0x3428 <KPD_u8GetPressedKey+0x76>
                {
                    Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
                }
                /*Return The Pressed Key*/
                return Local_u8PressedKey;
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	1b c0       	rjmp	.+54     	; 0x3482 <KPD_u8GetPressedKey+0xd0>
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    {
        /*Activate A Column , Activate (Ground)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], LOW);
        /*Iterate On The KPD Rows */
        for(Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	84 30       	cpi	r24, 0x04	; 4
    3456:	30 f2       	brcs	.-116    	; 0x33e4 <KPD_u8GetPressedKey+0x32>
                /*Return The Pressed Key*/
                return Local_u8PressedKey;
            }
        }
        /*Deactivate A Column , Deactivate (VCC)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], HIGH);
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	88 2f       	mov	r24, r24
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	fc 01       	movw	r30, r24
    3460:	e4 59       	subi	r30, 0x94	; 148
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	90 81       	ld	r25, Z
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	69 2f       	mov	r22, r25
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	8f 5f       	subi	r24, 0xFF	; 255
    3474:	8b 83       	std	Y+3, r24	; 0x03
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	84 30       	cpi	r24, 0x04	; 4
    347a:	08 f4       	brcc	.+2      	; 0x347e <KPD_u8GetPressedKey+0xcc>
    347c:	a5 cf       	rjmp	.-182    	; 0x33c8 <KPD_u8GetPressedKey+0x16>
        }
        /*Deactivate A Column , Deactivate (VCC)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], HIGH);
    }
    /*Return The Default Value*/
    return Local_u8PressedKey;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	8d 83       	std	Y+5, r24	; 0x05
    3482:	8d 81       	ldd	r24, Y+5	; 0x05
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <ISR>:
void vHoursHand(void);
void vClearLEDs(void);

u32 sec = 0, min = 5, hours = 3;

ISR(TIMER1_COMPA_vect) {
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <ISR+0x6>
    349a:	00 d0       	rcall	.+0      	; 0x349c <ISR+0x8>
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
	sec++;
    34a4:	80 91 86 00 	lds	r24, 0x0086
    34a8:	90 91 87 00 	lds	r25, 0x0087
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	90 93 87 00 	sts	0x0087, r25
    34b2:	80 93 86 00 	sts	0x0086, r24
	if(sec == 60){
    34b6:	80 91 86 00 	lds	r24, 0x0086
    34ba:	90 91 87 00 	lds	r25, 0x0087
    34be:	8c 33       	cpi	r24, 0x3C	; 60
    34c0:	91 05       	cpc	r25, r1
    34c2:	69 f4       	brne	.+26     	; 0x34de <ISR+0x4a>
		sec = 0;
    34c4:	10 92 87 00 	sts	0x0087, r1
    34c8:	10 92 86 00 	sts	0x0086, r1
		min ++;
    34cc:	80 91 80 00 	lds	r24, 0x0080
    34d0:	90 91 81 00 	lds	r25, 0x0081
    34d4:	01 96       	adiw	r24, 0x01	; 1
    34d6:	90 93 81 00 	sts	0x0081, r25
    34da:	80 93 80 00 	sts	0x0080, r24
	}
	if(min == 60){
    34de:	80 91 80 00 	lds	r24, 0x0080
    34e2:	90 91 81 00 	lds	r25, 0x0081
    34e6:	8c 33       	cpi	r24, 0x3C	; 60
    34e8:	91 05       	cpc	r25, r1
    34ea:	69 f4       	brne	.+26     	; 0x3506 <ISR+0x72>
		min = 0;
    34ec:	10 92 81 00 	sts	0x0081, r1
    34f0:	10 92 80 00 	sts	0x0080, r1
		hours ++;
    34f4:	80 91 82 00 	lds	r24, 0x0082
    34f8:	90 91 83 00 	lds	r25, 0x0083
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	90 93 83 00 	sts	0x0083, r25
    3502:	80 93 82 00 	sts	0x0082, r24
	}
	if(hours == 12){
    3506:	80 91 82 00 	lds	r24, 0x0082
    350a:	90 91 83 00 	lds	r25, 0x0083
    350e:	8c 30       	cpi	r24, 0x0C	; 12
    3510:	91 05       	cpc	r25, r1
    3512:	21 f4       	brne	.+8      	; 0x351c <ISR+0x88>
		hours = 0;
    3514:	10 92 83 00 	sts	0x0083, r1
    3518:	10 92 82 00 	sts	0x0082, r1
	}
	vClockDisplay();
    351c:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <vClockDisplay>
}
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <main>:

int main(void)
{
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62

	vInitClock();
    3536:	0e 94 ac 1a 	call	0x3558	; 0x3558 <vInitClock>
	vClockCircumference();
    353a:	0e 94 c6 1a 	call	0x358c	; 0x358c <vClockCircumference>
	vTimer1_Init();
    353e:	0e 94 88 08 	call	0x1110	; 0x1110 <vTimer1_Init>
	MGIE_voidEnableInterrupt();
    3542:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <MGIE_voidEnableInterrupt>

	while(1)
	{
		if(DIO_u8GetPinValue(DIO_PORTB, PIN0)){
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_u8GetPinValue>
    354e:	88 23       	and	r24, r24
    3550:	d1 f3       	breq	.-12     	; 0x3546 <main+0x18>
			vClockDisplay();
    3552:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <vClockDisplay>
    3556:	f7 cf       	rjmp	.-18     	; 0x3546 <main+0x18>

00003558 <vInitClock>:
		}
	}
}

void vInitClock(void){
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
	/* LEDs Port */
	DIO_voidSetPortSpecificDirection(DIO_PORTA, 0xff);
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	6f ef       	ldi	r22, 0xFF	; 255
    3564:	0e 94 ce 13 	call	0x279c	; 0x279c <DIO_voidSetPortSpecificDirection>
	DIO_voidSetPinDirection(DIO_PORTC, PIN6, OUTPUT);
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	66 e0       	ldi	r22, 0x06	; 6
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC, PIN7, OUTPUT);
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	67 e0       	ldi	r22, 0x07	; 7
    3576:	41 e0       	ldi	r20, 0x01	; 1
    3578:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
	/* Hall Sensor Port */
	DIO_voidSetPinDirection(DIO_PORTB, PIN0, INPUT);
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_voidSetPinDirection>
}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <vClockCircumference>:

void vClockCircumference(void){
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN0, HIGH);
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
//	DIO_voidSetPinValue(DIO_PORTA, PIN1, HIGH);
}
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <vClockSecondsMark>:

void vClockSecondsMark(void){
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN1, HIGH);
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	61 e0       	ldi	r22, 0x01	; 1
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    35b6:	cf 91       	pop	r28
    35b8:	df 91       	pop	r29
    35ba:	08 95       	ret

000035bc <vClockMinutesMark>:

void vClockMinutesMark(void){
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN1, HIGH);
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	41 e0       	ldi	r20, 0x01	; 1
    35ca:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN2, HIGH);
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	62 e0       	ldi	r22, 0x02	; 2
    35d2:	41 e0       	ldi	r20, 0x01	; 1
    35d4:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	08 95       	ret

000035de <vClockHoursMark>:

void vClockHoursMark(void){
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN1, HIGH);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN2, HIGH);
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	62 e0       	ldi	r22, 0x02	; 2
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN3, HIGH);
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	63 e0       	ldi	r22, 0x03	; 3
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <vSecondsHand>:

void vSecondsHand(void){
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN4, HIGH);
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	64 e0       	ldi	r22, 0x04	; 4
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN5, HIGH);
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	65 e0       	ldi	r22, 0x05	; 5
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN6, HIGH);
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	66 e0       	ldi	r22, 0x06	; 6
    362a:	41 e0       	ldi	r20, 0x01	; 1
    362c:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN7, HIGH);
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	67 e0       	ldi	r22, 0x07	; 7
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN6, HIGH);
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	66 e0       	ldi	r22, 0x06	; 6
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN7, HIGH);
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	67 e0       	ldi	r22, 0x07	; 7
    3648:	41 e0       	ldi	r20, 0x01	; 1
    364a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <vMinutesHand>:

void vMinutesHand(void){
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN5, HIGH);
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	65 e0       	ldi	r22, 0x05	; 5
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN6, HIGH);
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	66 e0       	ldi	r22, 0x06	; 6
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN7, HIGH);
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	67 e0       	ldi	r22, 0x07	; 7
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN6, HIGH);
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	66 e0       	ldi	r22, 0x06	; 6
    367e:	41 e0       	ldi	r20, 0x01	; 1
    3680:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN7, HIGH);
    3684:	82 e0       	ldi	r24, 0x02	; 2
    3686:	67 e0       	ldi	r22, 0x07	; 7
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <vHoursHand>:

void vHoursHand(void){
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTA, PIN6, HIGH);
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	66 e0       	ldi	r22, 0x06	; 6
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, PIN7, HIGH);
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	67 e0       	ldi	r22, 0x07	; 7
    36aa:	41 e0       	ldi	r20, 0x01	; 1
    36ac:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN6, HIGH);
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	66 e0       	ldi	r22, 0x06	; 6
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN7, HIGH);
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	67 e0       	ldi	r22, 0x07	; 7
    36be:	41 e0       	ldi	r20, 0x01	; 1
    36c0:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <vClearLEDs>:
void vClearLEDs(void){
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
	/* LEDs Port */
	DIO_voidSetPortSpecificValue(DIO_PORTA, 0x01); // Don't clear the Circumference
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	0e 94 0f 14 	call	0x281e	; 0x281e <DIO_voidSetPortSpecificValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN6, LOW);
    36da:	82 e0       	ldi	r24, 0x02	; 2
    36dc:	66 e0       	ldi	r22, 0x06	; 6
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC, PIN7, LOW);
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	67 e0       	ldi	r22, 0x07	; 7
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	0e 94 3d 12 	call	0x247a	; 0x247a <DIO_voidSetPinValue>
}
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <vClockDisplay>:

void vClockDisplay(void){
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	e4 97       	sbiw	r28, 0x34	; 52
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
	u32 ticks = 0, position = 0;
    3708:	1c aa       	std	Y+52, r1	; 0x34
    370a:	1b aa       	std	Y+51, r1	; 0x33
    370c:	1a aa       	std	Y+50, r1	; 0x32
    370e:	19 aa       	std	Y+49, r1	; 0x31
    3710:	c8 c1       	rjmp	.+912    	; 0x3aa2 <vClockDisplay+0x3ae>
	while(ticks < 60){
		vClockSecondsMark();
    3712:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <vClockSecondsMark>
		if(position % 5 == 0) vClockMinutesMark();
    3716:	89 a9       	ldd	r24, Y+49	; 0x31
    3718:	9a a9       	ldd	r25, Y+50	; 0x32
    371a:	25 e0       	ldi	r18, 0x05	; 5
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	b9 01       	movw	r22, r18
    3720:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodhi4>
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	11 f4       	brne	.+4      	; 0x372c <vClockDisplay+0x38>
    3728:	0e 94 de 1a 	call	0x35bc	; 0x35bc <vClockMinutesMark>
		if(position % 3 == 0) vClockHoursMark();
    372c:	89 a9       	ldd	r24, Y+49	; 0x31
    372e:	9a a9       	ldd	r25, Y+50	; 0x32
    3730:	23 e0       	ldi	r18, 0x03	; 3
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	b9 01       	movw	r22, r18
    3736:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodhi4>
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	11 f4       	brne	.+4      	; 0x3742 <vClockDisplay+0x4e>
    373e:	0e 94 ef 1a 	call	0x35de	; 0x35de <vClockHoursMark>
		if(position == sec) vSecondsHand();
    3742:	20 91 86 00 	lds	r18, 0x0086
    3746:	30 91 87 00 	lds	r19, 0x0087
    374a:	89 a9       	ldd	r24, Y+49	; 0x31
    374c:	9a a9       	ldd	r25, Y+50	; 0x32
    374e:	82 17       	cp	r24, r18
    3750:	93 07       	cpc	r25, r19
    3752:	11 f4       	brne	.+4      	; 0x3758 <vClockDisplay+0x64>
    3754:	0e 94 05 1b 	call	0x360a	; 0x360a <vSecondsHand>
		if(position == min)	vMinutesHand();
    3758:	20 91 80 00 	lds	r18, 0x0080
    375c:	30 91 81 00 	lds	r19, 0x0081
    3760:	89 a9       	ldd	r24, Y+49	; 0x31
    3762:	9a a9       	ldd	r25, Y+50	; 0x32
    3764:	82 17       	cp	r24, r18
    3766:	93 07       	cpc	r25, r19
    3768:	11 f4       	brne	.+4      	; 0x376e <vClockDisplay+0x7a>
    376a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <vMinutesHand>
		if(position / 5 == hours) vHoursHand();
    376e:	89 a9       	ldd	r24, Y+49	; 0x31
    3770:	9a a9       	ldd	r25, Y+50	; 0x32
    3772:	25 e0       	ldi	r18, 0x05	; 5
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	b9 01       	movw	r22, r18
    3778:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodhi4>
    377c:	cb 01       	movw	r24, r22
    377e:	9c 01       	movw	r18, r24
    3780:	80 91 82 00 	lds	r24, 0x0082
    3784:	90 91 83 00 	lds	r25, 0x0083
    3788:	28 17       	cp	r18, r24
    378a:	39 07       	cpc	r19, r25
    378c:	11 f4       	brne	.+4      	; 0x3792 <vClockDisplay+0x9e>
    378e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <vHoursHand>
		ticks ++;
    3792:	8b a9       	ldd	r24, Y+51	; 0x33
    3794:	9c a9       	ldd	r25, Y+52	; 0x34
    3796:	01 96       	adiw	r24, 0x01	; 1
    3798:	9c ab       	std	Y+52, r25	; 0x34
    379a:	8b ab       	std	Y+51, r24	; 0x33
		position ++;
    379c:	89 a9       	ldd	r24, Y+49	; 0x31
    379e:	9a a9       	ldd	r25, Y+50	; 0x32
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	9a ab       	std	Y+50, r25	; 0x32
    37a4:	89 ab       	std	Y+49, r24	; 0x31
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	ac e0       	ldi	r26, 0x0C	; 12
    37ac:	b4 e4       	ldi	r27, 0x44	; 68
    37ae:	8d a7       	std	Y+45, r24	; 0x2d
    37b0:	9e a7       	std	Y+46, r25	; 0x2e
    37b2:	af a7       	std	Y+47, r26	; 0x2f
    37b4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    37b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    37ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    37bc:	98 a9       	ldd	r25, Y+48	; 0x30
    37be:	2b ea       	ldi	r18, 0xAB	; 171
    37c0:	3a ea       	ldi	r19, 0xAA	; 170
    37c2:	4a e2       	ldi	r20, 0x2A	; 42
    37c4:	50 e4       	ldi	r21, 0x40	; 64
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	89 a7       	std	Y+41, r24	; 0x29
    37d0:	9a a7       	std	Y+42, r25	; 0x2a
    37d2:	ab a7       	std	Y+43, r26	; 0x2b
    37d4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    37d6:	69 a5       	ldd	r22, Y+41	; 0x29
    37d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    37da:	8b a5       	ldd	r24, Y+43	; 0x2b
    37dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	5f e3       	ldi	r21, 0x3F	; 63
    37e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ea:	88 23       	and	r24, r24
    37ec:	1c f4       	brge	.+6      	; 0x37f4 <vClockDisplay+0x100>
		__ticks = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	88 a7       	std	Y+40, r24	; 0x28
    37f2:	91 c0       	rjmp	.+290    	; 0x3916 <vClockDisplay+0x222>
	else if (__tmp > 255)
    37f4:	69 a5       	ldd	r22, Y+41	; 0x29
    37f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    37f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4f e7       	ldi	r20, 0x7F	; 127
    3802:	53 e4       	ldi	r21, 0x43	; 67
    3804:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3808:	18 16       	cp	r1, r24
    380a:	0c f0       	brlt	.+2      	; 0x380e <vClockDisplay+0x11a>
    380c:	7b c0       	rjmp	.+246    	; 0x3904 <vClockDisplay+0x210>
	{
		_delay_ms(__us / 1000.0);
    380e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3810:	7e a5       	ldd	r23, Y+46	; 0x2e
    3812:	8f a5       	ldd	r24, Y+47	; 0x2f
    3814:	98 a9       	ldd	r25, Y+48	; 0x30
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a e7       	ldi	r20, 0x7A	; 122
    381c:	54 e4       	ldi	r21, 0x44	; 68
    381e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8c a3       	std	Y+36, r24	; 0x24
    3828:	9d a3       	std	Y+37, r25	; 0x25
    382a:	ae a3       	std	Y+38, r26	; 0x26
    382c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382e:	6c a1       	ldd	r22, Y+36	; 0x24
    3830:	7d a1       	ldd	r23, Y+37	; 0x25
    3832:	8e a1       	ldd	r24, Y+38	; 0x26
    3834:	9f a1       	ldd	r25, Y+39	; 0x27
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	4a ef       	ldi	r20, 0xFA	; 250
    383c:	54 e4       	ldi	r21, 0x44	; 68
    383e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	88 a3       	std	Y+32, r24	; 0x20
    3848:	99 a3       	std	Y+33, r25	; 0x21
    384a:	aa a3       	std	Y+34, r26	; 0x22
    384c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    384e:	68 a1       	ldd	r22, Y+32	; 0x20
    3850:	79 a1       	ldd	r23, Y+33	; 0x21
    3852:	8a a1       	ldd	r24, Y+34	; 0x22
    3854:	9b a1       	ldd	r25, Y+35	; 0x23
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e8       	ldi	r20, 0x80	; 128
    385c:	5f e3       	ldi	r21, 0x3F	; 63
    385e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3862:	88 23       	and	r24, r24
    3864:	2c f4       	brge	.+10     	; 0x3870 <vClockDisplay+0x17c>
		__ticks = 1;
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	9f 8f       	std	Y+31, r25	; 0x1f
    386c:	8e 8f       	std	Y+30, r24	; 0x1e
    386e:	3f c0       	rjmp	.+126    	; 0x38ee <vClockDisplay+0x1fa>
	else if (__tmp > 65535)
    3870:	68 a1       	ldd	r22, Y+32	; 0x20
    3872:	79 a1       	ldd	r23, Y+33	; 0x21
    3874:	8a a1       	ldd	r24, Y+34	; 0x22
    3876:	9b a1       	ldd	r25, Y+35	; 0x23
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	3f ef       	ldi	r19, 0xFF	; 255
    387c:	4f e7       	ldi	r20, 0x7F	; 127
    387e:	57 e4       	ldi	r21, 0x47	; 71
    3880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3884:	18 16       	cp	r1, r24
    3886:	4c f5       	brge	.+82     	; 0x38da <vClockDisplay+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3888:	6c a1       	ldd	r22, Y+36	; 0x24
    388a:	7d a1       	ldd	r23, Y+37	; 0x25
    388c:	8e a1       	ldd	r24, Y+38	; 0x26
    388e:	9f a1       	ldd	r25, Y+39	; 0x27
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e2       	ldi	r20, 0x20	; 32
    3896:	51 e4       	ldi	r21, 0x41	; 65
    3898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9f 8f       	std	Y+31, r25	; 0x1f
    38ae:	8e 8f       	std	Y+30, r24	; 0x1e
    38b0:	0f c0       	rjmp	.+30     	; 0x38d0 <vClockDisplay+0x1dc>
    38b2:	88 ec       	ldi	r24, 0xC8	; 200
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9d 8f       	std	Y+29, r25	; 0x1d
    38b8:	8c 8f       	std	Y+28, r24	; 0x1c
    38ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <vClockDisplay+0x1ca>
    38c2:	9d 8f       	std	Y+29, r25	; 0x1d
    38c4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	9f 8f       	std	Y+31, r25	; 0x1f
    38ce:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	69 f7       	brne	.-38     	; 0x38b2 <vClockDisplay+0x1be>
    38d8:	24 c0       	rjmp	.+72     	; 0x3922 <vClockDisplay+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38da:	68 a1       	ldd	r22, Y+32	; 0x20
    38dc:	79 a1       	ldd	r23, Y+33	; 0x21
    38de:	8a a1       	ldd	r24, Y+34	; 0x22
    38e0:	9b a1       	ldd	r25, Y+35	; 0x23
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9f 8f       	std	Y+31, r25	; 0x1f
    38ec:	8e 8f       	std	Y+30, r24	; 0x1e
    38ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38f2:	9b 8f       	std	Y+27, r25	; 0x1b
    38f4:	8a 8f       	std	Y+26, r24	; 0x1a
    38f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <vClockDisplay+0x206>
    38fe:	9b 8f       	std	Y+27, r25	; 0x1b
    3900:	8a 8f       	std	Y+26, r24	; 0x1a
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <vClockDisplay+0x22e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3904:	69 a5       	ldd	r22, Y+41	; 0x29
    3906:	7a a5       	ldd	r23, Y+42	; 0x2a
    3908:	8b a5       	ldd	r24, Y+43	; 0x2b
    390a:	9c a5       	ldd	r25, Y+44	; 0x2c
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	88 a7       	std	Y+40, r24	; 0x28
    3916:	88 a5       	ldd	r24, Y+40	; 0x28
    3918:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    391a:	89 8d       	ldd	r24, Y+25	; 0x19
    391c:	8a 95       	dec	r24
    391e:	f1 f7       	brne	.-4      	; 0x391c <vClockDisplay+0x228>
    3920:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(560); // depends on the motor
		vClearLEDs();
    3922:	0e 94 65 1b 	call	0x36ca	; 0x36ca <vClearLEDs>
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	a6 e1       	ldi	r26, 0x16	; 22
    392c:	b5 e4       	ldi	r27, 0x45	; 69
    392e:	8d 8b       	std	Y+21, r24	; 0x15
    3930:	9e 8b       	std	Y+22, r25	; 0x16
    3932:	af 8b       	std	Y+23, r26	; 0x17
    3934:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3936:	6d 89       	ldd	r22, Y+21	; 0x15
    3938:	7e 89       	ldd	r23, Y+22	; 0x16
    393a:	8f 89       	ldd	r24, Y+23	; 0x17
    393c:	98 8d       	ldd	r25, Y+24	; 0x18
    393e:	2b ea       	ldi	r18, 0xAB	; 171
    3940:	3a ea       	ldi	r19, 0xAA	; 170
    3942:	4a e2       	ldi	r20, 0x2A	; 42
    3944:	50 e4       	ldi	r21, 0x40	; 64
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	89 8b       	std	Y+17, r24	; 0x11
    3950:	9a 8b       	std	Y+18, r25	; 0x12
    3952:	ab 8b       	std	Y+19, r26	; 0x13
    3954:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3956:	69 89       	ldd	r22, Y+17	; 0x11
    3958:	7a 89       	ldd	r23, Y+18	; 0x12
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	9c 89       	ldd	r25, Y+20	; 0x14
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e8       	ldi	r20, 0x80	; 128
    3964:	5f e3       	ldi	r21, 0x3F	; 63
    3966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    396a:	88 23       	and	r24, r24
    396c:	1c f4       	brge	.+6      	; 0x3974 <vClockDisplay+0x280>
		__ticks = 1;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	88 8b       	std	Y+16, r24	; 0x10
    3972:	91 c0       	rjmp	.+290    	; 0x3a96 <vClockDisplay+0x3a2>
	else if (__tmp > 255)
    3974:	69 89       	ldd	r22, Y+17	; 0x11
    3976:	7a 89       	ldd	r23, Y+18	; 0x12
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	9c 89       	ldd	r25, Y+20	; 0x14
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	4f e7       	ldi	r20, 0x7F	; 127
    3982:	53 e4       	ldi	r21, 0x43	; 67
    3984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3988:	18 16       	cp	r1, r24
    398a:	0c f0       	brlt	.+2      	; 0x398e <vClockDisplay+0x29a>
    398c:	7b c0       	rjmp	.+246    	; 0x3a84 <vClockDisplay+0x390>
	{
		_delay_ms(__us / 1000.0);
    398e:	6d 89       	ldd	r22, Y+21	; 0x15
    3990:	7e 89       	ldd	r23, Y+22	; 0x16
    3992:	8f 89       	ldd	r24, Y+23	; 0x17
    3994:	98 8d       	ldd	r25, Y+24	; 0x18
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a e7       	ldi	r20, 0x7A	; 122
    399c:	54 e4       	ldi	r21, 0x44	; 68
    399e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	8c 87       	std	Y+12, r24	; 0x0c
    39a8:	9d 87       	std	Y+13, r25	; 0x0d
    39aa:	ae 87       	std	Y+14, r26	; 0x0e
    39ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    39b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    39b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    39b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a ef       	ldi	r20, 0xFA	; 250
    39bc:	54 e4       	ldi	r21, 0x44	; 68
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	88 87       	std	Y+8, r24	; 0x08
    39c8:	99 87       	std	Y+9, r25	; 0x09
    39ca:	aa 87       	std	Y+10, r26	; 0x0a
    39cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39ce:	68 85       	ldd	r22, Y+8	; 0x08
    39d0:	79 85       	ldd	r23, Y+9	; 0x09
    39d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <vClockDisplay+0x2fc>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9f 83       	std	Y+7, r25	; 0x07
    39ec:	8e 83       	std	Y+6, r24	; 0x06
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <vClockDisplay+0x37a>
	else if (__tmp > 65535)
    39f0:	68 85       	ldd	r22, Y+8	; 0x08
    39f2:	79 85       	ldd	r23, Y+9	; 0x09
    39f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <vClockDisplay+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9f 83       	std	Y+7, r25	; 0x07
    3a2e:	8e 83       	std	Y+6, r24	; 0x06
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <vClockDisplay+0x35c>
    3a32:	88 ec       	ldi	r24, 0xC8	; 200
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9d 83       	std	Y+5, r25	; 0x05
    3a38:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <vClockDisplay+0x34a>
    3a42:	9d 83       	std	Y+5, r25	; 0x05
    3a44:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	8e 81       	ldd	r24, Y+6	; 0x06
    3a48:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9f 83       	std	Y+7, r25	; 0x07
    3a4e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	8e 81       	ldd	r24, Y+6	; 0x06
    3a52:	9f 81       	ldd	r25, Y+7	; 0x07
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <vClockDisplay+0x33e>
    3a58:	24 c0       	rjmp	.+72     	; 0x3aa2 <vClockDisplay+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	68 85       	ldd	r22, Y+8	; 0x08
    3a5c:	79 85       	ldd	r23, Y+9	; 0x09
    3a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9f 83       	std	Y+7, r25	; 0x07
    3a6c:	8e 83       	std	Y+6, r24	; 0x06
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	9b 83       	std	Y+3, r25	; 0x03
    3a74:	8a 83       	std	Y+2, r24	; 0x02
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <vClockDisplay+0x386>
    3a7e:	9b 83       	std	Y+3, r25	; 0x03
    3a80:	8a 83       	std	Y+2, r24	; 0x02
    3a82:	0f c0       	rjmp	.+30     	; 0x3aa2 <vClockDisplay+0x3ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a84:	69 89       	ldd	r22, Y+17	; 0x11
    3a86:	7a 89       	ldd	r23, Y+18	; 0x12
    3a88:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	88 8b       	std	Y+16, r24	; 0x10
    3a96:	88 89       	ldd	r24, Y+16	; 0x10
    3a98:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	8a 95       	dec	r24
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <vClockDisplay+0x3a8>
    3aa0:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DIO_PORTC, PIN7, LOW);
}

void vClockDisplay(void){
	u32 ticks = 0, position = 0;
	while(ticks < 60){
    3aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa6:	8c 33       	cpi	r24, 0x3C	; 60
    3aa8:	91 05       	cpc	r25, r1
    3aaa:	08 f4       	brcc	.+2      	; 0x3aae <vClockDisplay+0x3ba>
    3aac:	32 ce       	rjmp	.-924    	; 0x3712 <vClockDisplay+0x1e>
		position ++;
		_delay_us(560); // depends on the motor
		vClearLEDs();
		_delay_us(2400); // depends on the
	}
}
    3aae:	e4 96       	adiw	r28, 0x34	; 52
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <__udivmodhi4>:
    3ac0:	aa 1b       	sub	r26, r26
    3ac2:	bb 1b       	sub	r27, r27
    3ac4:	51 e1       	ldi	r21, 0x11	; 17
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <__udivmodhi4_ep>

00003ac8 <__udivmodhi4_loop>:
    3ac8:	aa 1f       	adc	r26, r26
    3aca:	bb 1f       	adc	r27, r27
    3acc:	a6 17       	cp	r26, r22
    3ace:	b7 07       	cpc	r27, r23
    3ad0:	10 f0       	brcs	.+4      	; 0x3ad6 <__udivmodhi4_ep>
    3ad2:	a6 1b       	sub	r26, r22
    3ad4:	b7 0b       	sbc	r27, r23

00003ad6 <__udivmodhi4_ep>:
    3ad6:	88 1f       	adc	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	5a 95       	dec	r21
    3adc:	a9 f7       	brne	.-22     	; 0x3ac8 <__udivmodhi4_loop>
    3ade:	80 95       	com	r24
    3ae0:	90 95       	com	r25
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	08 95       	ret

00003ae8 <__prologue_saves__>:
    3ae8:	2f 92       	push	r2
    3aea:	3f 92       	push	r3
    3aec:	4f 92       	push	r4
    3aee:	5f 92       	push	r5
    3af0:	6f 92       	push	r6
    3af2:	7f 92       	push	r7
    3af4:	8f 92       	push	r8
    3af6:	9f 92       	push	r9
    3af8:	af 92       	push	r10
    3afa:	bf 92       	push	r11
    3afc:	cf 92       	push	r12
    3afe:	df 92       	push	r13
    3b00:	ef 92       	push	r14
    3b02:	ff 92       	push	r15
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	ca 1b       	sub	r28, r26
    3b12:	db 0b       	sbc	r29, r27
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	09 94       	ijmp

00003b20 <__epilogue_restores__>:
    3b20:	2a 88       	ldd	r2, Y+18	; 0x12
    3b22:	39 88       	ldd	r3, Y+17	; 0x11
    3b24:	48 88       	ldd	r4, Y+16	; 0x10
    3b26:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b28:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b30:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b32:	b9 84       	ldd	r11, Y+9	; 0x09
    3b34:	c8 84       	ldd	r12, Y+8	; 0x08
    3b36:	df 80       	ldd	r13, Y+7	; 0x07
    3b38:	ee 80       	ldd	r14, Y+6	; 0x06
    3b3a:	fd 80       	ldd	r15, Y+5	; 0x05
    3b3c:	0c 81       	ldd	r16, Y+4	; 0x04
    3b3e:	1b 81       	ldd	r17, Y+3	; 0x03
    3b40:	aa 81       	ldd	r26, Y+2	; 0x02
    3b42:	b9 81       	ldd	r27, Y+1	; 0x01
    3b44:	ce 0f       	add	r28, r30
    3b46:	d1 1d       	adc	r29, r1
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	ed 01       	movw	r28, r26
    3b54:	08 95       	ret

00003b56 <_exit>:
    3b56:	f8 94       	cli

00003b58 <__stop_program>:
    3b58:	ff cf       	rjmp	.-2      	; 0x3b58 <__stop_program>
